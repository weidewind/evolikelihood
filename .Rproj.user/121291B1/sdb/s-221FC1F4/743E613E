{
    "contents" : "\nparse_em_output <- function(prot, model, categories){\n  emfiles <- list.files(path = file.path(getwd(), \"output\", \"wood_likelihood\", model, prot, fsep = .Platform$file.sep), pattern = paste(c(prot,\"_[a-z]+_\", categories,\".*\"), collapse=\"\"), all.files = FALSE,\n                        full.names = TRUE, recursive = FALSE)\n  emshortfiles <- list.files(path = file.path(getwd(), \"output\", \"wood_likelihood\", model, prot, fsep = .Platform$file.sep), pattern = paste(c(prot,\"_[a-z]+_\", categories,\".*\"), collapse=\"\"), all.files = FALSE,\n                             full.names = FALSE, recursive = FALSE)\n  boo <- sapply(emfiles, function(ef){\n    length(grep('model bic',readLines(ef),  value = TRUE, perl = TRUE)) == 1\n  })\n  \n  emfiles <- emfiles[boo]\n  emshortfiles <- emshortfiles[boo]\n  \n  em_output <- lapply(emfiles, function(file){\n    em_file <-  readLines(file)  \n    grepped_params <- tail(grep('^\\\\s+[0-9]', em_file,  value = TRUE, perl = TRUE), categories)\n    grepped_lambdas <- tail(grep('^\\\\[1\\\\]\\\\s+\\\\\"expon', em_file,  value = TRUE, perl = TRUE), categories)\n    grepped_weights <- tail(grep('^\\\\[1\\\\]\\\\s+[0-9]\\\\.[0-9]', em_file,  value = TRUE, perl = TRUE), 1)\n    \n    my_params <-matrix(ncol = 4, nrow = categories, byrow = TRUE)\n    colnames(my_params) = c(\"lambda_weib\", \"p\", \"weight\", \"lambda_exp\")\n    \n    for (c in seq(1, categories, 1)){\n      my_params[c,1] <- as.numeric(strsplit(grepped_params[c], '\\\\s+')[[1]][3])\n      my_params[c,2] <- as.numeric(strsplit(grepped_params[c], '\\\\s+')[[1]][2])\n      my_params[c,3] <- as.numeric(strsplit(grepped_weights[1], '\\\\s+')[[1]][c+1])\n      my_str <- strsplit(grepped_lambdas[c], '\\\\s+')[[1]][4]\n      my_params[c,4] <- as.numeric(substr(my_str, 0, nchar(my_str)-1))\n    }\n    grepped_bic <- tail(em_file, 1)\n    bic <- as.numeric(strsplit(grepped_bic, '\\\\s+')[[1]][2])\n    list(params = my_params, bic = bic)\n  })\n  \n  names(em_output) <- emshortfiles\n  em_output\n}\n\n\nparse_group_output <- function(prot, model, categories){\n  emfiles <- list.files(path = file.path(getwd(), \"output\", \"group_likelihood\", model, prot, fsep = .Platform$file.sep), pattern = paste(c(prot,\"_.*\"), collapse=\"\"), all.files = FALSE,\n                        full.names = TRUE, recursive = FALSE)\n  emshortfiles <- list.files(path = file.path(getwd(), \"output\", \"group_likelihood\", model, prot, fsep = .Platform$file.sep), pattern = paste(c(prot,\"_.*\"), collapse=\"\"), all.files = FALSE,\n                             full.names = FALSE, recursive = FALSE)\n  boo <- sapply(emfiles, function(ef){\n    length(grep('model bic',readLines(ef),  value = TRUE, perl = TRUE)) == 1\n  })\n  print (emshortfiles)\n  emfiles <- emfiles[boo]\n  emshortfiles <- emshortfiles[boo]\n  \n  em_output <- lapply(emfiles, function(file){\n    em_file <-  readLines(file)  \n    grepped_params <- tail(grep('^\\\\s+[0-9]', em_file,  value = TRUE, perl = TRUE), categories)\n    grepped_lambdas <- tail(grep('^\\\\[1\\\\]\\\\s+\\\\\"expon', em_file,  value = TRUE, perl = TRUE), categories)\n    grepped_weights <- tail(grep('^\\\\[1\\\\]\\\\s+[0-9]\\\\.[0-9]', em_file,  value = TRUE, perl = TRUE), 1)\n    \n    my_params <-matrix(ncol = 4, nrow = categories, byrow = TRUE)\n    colnames(my_params) = c(\"lambda_weib\", \"p\", \"weight\", \"lambda_exp\")\n    \n    for (c in seq(1, categories, 1)){\n      my_params[c,1] <- as.numeric(strsplit(grepped_params[c], '\\\\s+')[[1]][3])\n      my_params[c,2] <- as.numeric(strsplit(grepped_params[c], '\\\\s+')[[1]][2])\n      my_params[c,3] <- as.numeric(strsplit(grepped_weights[1], '\\\\s+')[[1]][c+1])\n      my_str <- strsplit(grepped_lambdas[c], '\\\\s+')[[1]][4]\n      my_params[c,4] <- as.numeric(substr(my_str, 0, nchar(my_str)-1))\n    }\n    grepped_bic <- tail(em_file, 1)\n    bic <- as.numeric(strsplit(grepped_bic, '\\\\s+')[[1]][2])\n    list(params = my_params, bic = bic)\n  })\n  \n  names(em_output) <- emshortfiles\n  em_output\n}\n\nparse_group_LRT <-function(prot){\n  #prot <- \"h3\"\n  dir <- file.path(getwd(), \"output\", \"group_likelihood\", \"weibull\", prot, fsep = .Platform$file.sep)\n  complfiles <- list.files(path = dir, pattern = paste(c(\"^\", prot,\"_.*_complement\"), collapse=\"\"), all.files = FALSE,\n                        full.names = TRUE, recursive = FALSE)\n  groupfiles <- sapply(complfiles, function(f){\n    temp <- gregexpr('_', f)\n    tochop <- temp[[1]][length(temp[[1]])]\n    substr(f,1, tochop-1)\n  })\n\n  print (groupfiles)\n  print (complfiles)\n  \n  output <- lapply(groupfiles, function(wgfile){\n    gfname <-basename(wgfile)\n    \n    wgroup_file <-  readLines(wgfile)  \n    wg_grepped_lnL <- tail(wgroup_file, 5)[1]\n    wg_lnL <- as.numeric(strsplit(wg_grepped_lnL, '\\\\s+')[[1]][2])\n    \n    egroup_file <-  readLines(file.path(getwd(), \"output\", \"group_likelihood\", \"exponential\", prot, gfname, fsep = .Platform$file.sep))  \n    eg_grepped_lnL <- tail(egroup_file, 5)[1]\n    eg_lnL <- as.numeric(strsplit(eg_grepped_lnL, '\\\\s+')[[1]][2])\n    \n    lr <- 2*(wg_lnL-eg_lnL)\n    \n    print (eg_lnL)\n    print (wg_lnL)\n    print (gfname)\n    print (lr)\n  })\n  \n\n}\n\ncolor.gradient <- function(x, colors=c(\"red\",\"yellow\",\"springgreen\",\"royalblue\"), colsteps=15) {\n  return( colorRampPalette(colors) (colsteps) [ findInterval(x, seq(min(x),max(x), length.out=colsteps)) ] )\n}\n\nshow_em_results <- function (em_output, model = c(\"weibull\", \"exponential\"), filter_worst = 0, filter_best = 0){\n  bics <- sapply(em_output, function (elm){\n    elm$bic\n  })\n  \n  sorted_bics <-sort(bics)\n  good_names <- names(head(sorted_bics, length(sorted_bics)-filter_worst))\n  bics <- bics[good_names]\n  em_output<- em_output[good_names]\n  sorted_bics <- sorted_bics[good_names]\n  \n  bad_names <- names(tail(sorted_bics, length(sorted_bics)-filter_best))\n  bics <- bics[bad_names]\n  em_output<- em_output[bad_names]\n  sorted_bics <- sorted_bics[bad_names]\n  \n  if (model == \"weibull\"){\n    myplot <- scatterplot3d(0,0,0, color= \"white\", type=\"h\", xlab = \"lambda\", ylab = \"p\", zlab = \"weight\", xlim = c(0, 0.1), ylim = c(0,10), zlim = c(0,1), pch=19)\n    \n    for (c in seq(1, categories, 1)){\n      firstl <- sapply(em_output, function (e){\n        e$params[c,1]\n      })\n      firstp <- sapply(em_output, function (e){\n        e$params[c,2]\n      })\n      firstw <- sapply(em_output, function (e){\n        e$params[c,3]\n      })\n      \n      # only first cluster for all files\n      myplot$points3d(firstl, firstp, firstw, col= color.gradient(bics), type=\"h\", pch=19)\n    }\n    \n    cluster <- em_output[grep('clu', names(em_output))]\n    \n    # only first cluster for all files\n    if (length(cluster) > 0){\n      for (c in seq(1, categories, 1)){\n        myplot$points3d(cluster[[1]]$params[c,1], cluster[[1]]$params[c,2], cluster[[1]]$params[c,3], col= color.gradient(bics), type=\"h\", pch=17)\n      }\n    }\n  }\n  \n  else {\n    myplot <- plot(0,0, col= \"white\",  xlim = c(0, 0.1), ylim = c(0,1), xlab = \"lambda\", ylab = \"weight\", pch=19)\n    for (c in seq(1,categories,1)){\n      firstl <- sapply(em_output, function (e){\n        e$params[c,4]\n      })\n      firstw <- sapply(em_output, function (e){\n        e$params[c,3]\n      })\n      points(firstl, firstw, col= color.gradient(bics), pch=19)\n    }\n    \n    cluster <- em_output[grep('clu', names(em_output))]\n    if (length(cluster) > 0){\n    # only first cluster for all files\n    for (c in seq(1, categories, 1)){\n      points(cluster[[1]]$params[c,4], cluster[[1]]$params[c,3], col= color.gradient(bics), pch=17)\n    }\n    }\n  }\n  ##\n  \n  print (paste (\"best bic\", names(head(sorted_bics, 1)), head(sorted_bics, 1)))\n  print (paste (\"worst bic\", names(tail(sorted_bics, 1)),tail(sorted_bics, 1)))\n  print (paste (\"diff\", tail(sorted_bics, 1)-head(sorted_bics, 1)))\n\n}\n\nshow_em_all_results <- function (em_output, model = c(\"weibull\", \"exponential\")){\n  bics <- sapply(em_output, function (elm){\n    elm$bic\n  })\n  \n  sorted_bics <-sort(bics)\n  print (length(sorted_bics))\n  print (sorted_bics)\n  \n  if (model == \"weibull\"){\n    myplot <- scatterplot3d(0,0,0, color= \"white\", type=\"h\", xlab = \"lambda\", ylab = \"p\", zlab = \"weight\", xlim = c(0, 0.1), ylim = c(0,10), zlim = c(0,1), pch=19)\n    \n    for (c in seq(1, categories, 1)){\n      firstl <- sapply(em_output, function (e){\n        e$params[c,1]\n      })\n      firstp <- sapply(em_output, function (e){\n        e$params[c,2]\n      })\n      firstw <- sapply(em_output, function (e){\n        e$params[c,3]\n      })\n      \n      # only first cluster for all files\n      myplot$points3d(firstl, firstp, firstw, col= color.gradient(bics), type=\"h\", pch=19)\n    }\n    \n    cluster <- em_output[grep('clu', names(em_output))]\n    print (\"better than cluster\")\n    print(length(sorted_bics[sorted_bics<cluster[[1]]$bic]))\n    print (\"equal to cluster\")\n    print(length(sorted_bics[sorted_bics == cluster[[1]]$bic]) - 1)\n    print (\"worse than cluster\")\n    print(length(sorted_bics[sorted_bics > cluster[[1]]$bic]))\n    \n    \n    # only first cluster for all files\n    if (length(cluster) > 0){\n      for (c in seq(1, categories, 1)){\n        myplot$points3d(cluster[[1]]$params[c,1], cluster[[1]]$params[c,2], cluster[[1]]$params[c,3], col= color.gradient(bics), type=\"h\", pch=17)\n      }\n    }\n  }\n  \n  else {\n    myplot <- plot(0,0, col= \"white\",  xlim = c(0, 0.1), ylim = c(0,1), xlab = \"lambda\", ylab = \"weight\", pch=19)\n    for (c in seq(1,categories,1)){\n      firstl <- sapply(em_output, function (e){\n        e$params[c,4]\n      })\n      firstw <- sapply(em_output, function (e){\n        e$params[c,3]\n      })\n      points(firstl, firstw, col= color.gradient(bics), pch=19)\n    }\n    \n    cluster <- em_output[grep('clu', names(em_output))]\n    print (\"better than cluster\")\n    print(length(sorted_bics[sorted_bics<cluster[[1]]$bic]))\n    print (\"equal to cluster\")\n    print(length(sorted_bics[sorted_bics == cluster[[1]]$bic])- 1)\n    print (\"worse than cluster\")\n    print(length(sorted_bics[sorted_bics > cluster[[1]]$bic]))\n    if (length(cluster) > 0){\n      # only first cluster for all files\n      for (c in seq(1, categories, 1)){\n        points(cluster[[1]]$params[c,4], cluster[[1]]$params[c,3], col= color.gradient(bics), pch=17)\n      }\n    }\n  }\n  ##\n  \n  print (paste (\"best bic\", names(head(sorted_bics, 1)), head(sorted_bics, 1)))\n  print (paste (\"worst bic\", names(tail(sorted_bics, 1)),tail(sorted_bics, 1)))\n  print (paste (\"diff\", tail(sorted_bics, 1)-head(sorted_bics, 1)))\n  \n}\n\n\n\n\n",
    "created" : 1464356396686.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4291174373",
    "id" : "743E613E",
    "lastKnownWriteTime" : 1464688590,
    "path" : "C:/Users/weidewind/workspace/evolike/R/ParseOutput.R",
    "project_path" : "R/ParseOutput.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}