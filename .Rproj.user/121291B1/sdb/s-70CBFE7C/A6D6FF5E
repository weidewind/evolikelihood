{
    "contents" : "#!/usr/bin/env Rscript\nlist.of.packages <- c(\"parallel\", \"ArgumentCheck\", \"optparse\")\nnew.packages <- setdiff(list.of.packages, installed.packages()[,\"Package\"])\nif(length(new.packages)) install.packages(new.packages, repos='http://cran.us.r-project.org')\nlibrary(parallel)\nlibrary(optparse)\n\n\noption_list = list(\n  make_option(c(\"-p\", \"--prot\"), type=\"character\", default=NULL, \n              help=\"protein: h1, h3, n1 or n2\", metavar=\"character\"),\n  make_option(c(\"-i\", \"--init_method\"), type=\"character\", default=\"cluster\", \n              help=\"initialization method: clusterization of parameters (cluster) or radomly chosen parameters (random) [default= %default]\", metavar=\"character\"),\n  make_option(c(\"-t\", \"--trials\"), type=\"integer\", default=1, \n              help=\"number of em trials (ignored if number of categories is 1 or if initialization method is cluster)\", metavar=\"integer\"),\n  make_option(c(\"-c\", \"--categories\"), type=\"integer\", default=3, \n              help=\"number of categories\", metavar=\"integer\"),\n  make_option(c(\"-m\", \"--model\"), type=\"character\", default=\"weibull\", \n              help=\"model distr: weibull or exponential\", metavar=\"character\")\n  ); \n\nopt_parser = OptionParser(option_list=option_list);\nopt = parse_args(opt_parser);\n\nwith (opt, {\n\nCheck <- ArgumentCheck::newArgCheck()\n\nif (!(prot %in% c(\"h1\", \"h3\", \"n1\", \"n2\"))){ \n  ArgumentCheck::addError(\n    msg = \"valid 'prot' options: h1, h3, n1, n2\",\n    argcheck = Check\n  )\n}\nif (!(init_method %in% c(\"cluster\", \"random\"))){\n  ArgumentCheck::addError(\n    msg = \"valid 'init_method' options: cluster, random\",\n    argcheck = Check\n  )\n}\n\nif (categories < 1){\n  ArgumentCheck::addError(\n    msg = \"'categories' must be >= 1\",\n    argcheck = Check\n  )\n}\nif (trials < 1){\n  ArgumentCheck::addError(\n    msg = \"'trials' must be >= 1\",\n    argcheck = Check\n  )\n}\nif (!(model %in% c(\"weibull\", \"exponential\"))){\n  ArgumentCheck::addError(\n    msg = \"valid 'model' options: weibull, exponential\",\n    argcheck = Check\n  )\n}\nif (categories == 1 && trials > 1){\n  trials = 1\n  ArgumentCheck::addWarning(\n    msg = \"'categories' equals to 1, will make only one trial (trials option ignored)\",\n    argcheck = Check\n  )\n}\nif (init_method == \"cluster\"  && trials > 1){\n  trials = 1\n  ArgumentCheck::addWarning(\n    msg = \"initialization by clustering, will make only one trial (trials option ignored)\",\n    argcheck = Check\n  )\n}\n#* Return errors and warnings (if any)\nArgumentCheck::finishArgCheck(Check)\n\n\npathnames <- list.files(pattern=\"^[A-Z].*[.]R$\", path=file.path(c(getwd(), \"R\"), fsep = .Platform$file.sep), full.names=TRUE);\nprint (\"Sourcing files: \")\nprint (pathnames)\nsapply(pathnames, FUN=source);\n\n\n#prot <- \"h1\"\nprot_data <-  read.csv(file.path(c(getwd(), \"input\", paste(c(prot,\"_for_LRT.csv\"), collapse=\"\")),fsep = .Platform$file.sep),stringsAsFactors=FALSE)  \nsplitted <- split(prot_data, list(prot_data$site, prot_data$ancestor_node), drop=TRUE)\nparams <-parameters(splitted, mutation_position = \"middle\",  filter = TRUE, jack = FALSE, pack = \"rootsolve\", verbose = FALSE)\n\n# Calculate the number of cores\ncount_cores <- detectCores() - 1\n# Initiate cluster\ncl <- makeCluster(count_cores)\nclusterExport(cl, \"params\", \"splitted\")\nem_results_list <- parLapply(cl, seq(1, trials, 1), function(trial){\n  sink (file.path(c(getwd(), \"output\",\"wood_likelihood\", model, paste(c(prot, \"_\", init_method, \"_\", trial), collapse=\"\")),fsep = .Platform$file.sep))\n  em_results <- em_procedure(data=splitted, params=params, model = model, iter = 1000, cluster.number= categories, init_method = \"cluster\", mutation_position = \"middle\",  filtering = \"single\", trace = TRUE)\n  sink() \n  em_results\n})\nstopCluster(cl)\n\n})\n ",
    "created" : 1461838456502.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "9967380",
    "id" : "A6D6FF5E",
    "lastKnownWriteTime" : 1461863358,
    "path" : "C:/Users/weidewind/workspace/evolikelihood/R/emme.R",
    "project_path" : "R/emme.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}