{
    "contents" : "list.of.packages <- c(\"rootSolve\", \"nleqslv\")\nnew.packages <- setdiff(list.of.packages, installed.packages()[,\"Package\"])\nif(length(new.packages)) install.packages(new.packages, repos='http://cran.us.r-project.org')\n\nlibrary(\"rootSolve\")\nlibrary(\"nleqslv\")\n\n\n\n## multiroot, finds only one root \nfind_single_root <- function(data, mutation_position, rkvector, jack = FALSE, pack = \"rootsolve\", verbose=TRUE){\n  # pack nleqslv\n  # data is a list of dataframes, node_data is a dataframe\n\n  if (pack != \"rootsolve\" && pack != \"nleqslv\"){\n      stop (\"Incorrect argument pack: must be either 'rootsolve' or 'nleqslv'\")\n  }\n  \n  if (length(data) == 1){\n    mode <- \"single\"\n    node_data <- data[[1]]\n    rkvector <- c(1)\n    names(rkvector) <- names(data)\n    if (verbose){\n      print (\"Running in single mode\")\n    }\n  }\n  else {\n    mode <- \"group\"\n    if (verbose){\n      print (\"Running in group mode\")\n    }\n    if(is.null(rkvector)){\n      stop (\"In group mode argument rkvector must be provided\")\n    }\n  }\n  \n  \n  if (mode == \"group\" || (mode == \"single\" && sum(node_data$event) != 0)){\n    if (verbose && mode == \"single\"){\n      print (node_data)\n      print (paste(\"site \", node_data[2,1], \" node \", node_data[2,2]))\n      print (paste(\"number of mutations \", sum(node_data$event)))\n    }\n    \n    pars <- list(data = data, rkvector = rkvector, mutation_position = mutation_position)\n    lambda_exp_root <- lambda_derivative_exp(pars)\n    if (verbose){print(paste(\"expon_lambda root \", lambda_exp_root))}\n    \n    # if p root is negative, search for positive root\n    p = -1\n    init = 0.2\n    count = 1\n    \n    while(  (!is.na(p) && (p < 0  || (!is.null(solution_p$termcd) && solution_p$termcd > 2)|| (!is.null(solution_p$estim.precis) && is.nan(solution_p$estim.precis))) ) && count < 20){\n      print (paste(c(\"staring with p = \", init)))\n      if (pack == \"rootsolve\"){\n        if (jack){\n          solution_p <- multiroot(f = p_derivative, start = c(init), jacfunc = p_derivative_jacfunc, jactype = \"fullusr\", parms = pars)\n        }\n        else {\n          solution_p <- multiroot(f = p_derivative, start = c(init), parms = pars)\n        }\n        p <-solution_p$root\n      }\n      else if (pack == \"nleqslv\"){\n        #if (jack){\n        #  solution_p <- multiroot(f = p_derivative, start = c(init), jacfunc = p_derivative_jacfunc, jactype = \"fullusr\", parms = pars)\n        #}\n       # else {\n          solution_p <- nleqslv(fn = p_derivative, x = c(init), parms = pars)\n         # print (solution_p)\n        #}\n        p <-solution_p$x\n      }\n      \n      init <- init + 1\n      count <- count + 1\n    }\n    \n    if (pack == \"rootsolve\"){\n      precision <- solution_p$estim.precis\n      p_root <- solution_p$root\n    }\n    else {\n      precision <- solution_p$fvec\n      p_root <- solution_p$x\n    }\n    \n    \n    if (verbose){print(paste(\"precision_p \", precision) )}\n    if(is.na(p_root)){\n      print(paste(\"no p_roots found\"))\n      c(p_root = NA, p_precision = NA,\n        lambda_weib_root = NA, lambda_exp_root = lambda_exp_root)\n    }\n    else if(is.na(precision)){\n      if (verbose){\n        print(paste(\"p_root is \",p_root, \" but estimated precision for p is Na, won't try to estimate lambda\"))\n      }\n      c(p_root = p_root, p_precision = NA,\n        lambda_weib_root = NA, lambda_exp_root = lambda_exp_root)\n    }\n    \n    else {\n      pars <- list(p = p_root, data = data, rkvector = rkvector, mutation_position = mutation_position)\n      lambda_weib_root <- lambda_derivative_weib(pars)\n      if (verbose){ print (c(p_root = p_root, lambda_weib_root = lambda_weib_root))}\n      c(p_root = p_root, p_precision = precision,\n        lambda_weib_root = lambda_weib_root,\n        lambda_exp_root = lambda_exp_root)\n    }\n    \n  }\n  else {\n    if (verbose && mode == \"single\"){ \n      print (paste(\"site \", node_data[2,1], \" node \", node_data[2,2]))\n      print (\"No mutations in the subtree, all roots NA\")\n    }\n    c(p_root = NA, p_precision = NA,\n      lambda_weib_root = NA, lambda_exp_root = NA)\n  }\n}\n\n## computes parameters for all nodes, outputs only complete sets of parameters\n#parameters <-function(prot, tag, fishy = FALSE){\nparameters <-function(data, mutation_position = \"middle\", rkvector, filter = TRUE, jack = FALSE, pack = \"rootsolve\", verbose = FALSE){\n  \n  ps <- lapply (names(data), function(elm, mut_pos){\n    mutation_position <- mut_pos\n    node_data <- data[elm]\n    node_roots <- find_single_root(node_data, mutation_position, rkvector, jack = jack, pack = pack, verbose = verbose)\n    if (!filter || filter && !is.na(node_roots) &&  all(is.finite(node_roots)) && node_roots[\"p_precision\"] < 1e-5 ) {\n        c(node = elm, lambda_exp = node_roots[\"lambda_exp_root\"], lambda_weib = node_roots[\"lambda_weib_root\"], p = node_roots[\"p_root\"], p_precision = node_roots[\"p_precision\"], events = sum(node_data[[1]]$event))\n    }\n\n  }, mut_pos = mutation_position)\n  \n  if (filter) {\n    ps  <- Filter(Negate(is.null), ps)\n  }\n  params <- data.frame(matrix(unlist(ps), nrow=length(ps), byrow=T),stringsAsFactors=FALSE)\n  names(params) <- c(\"node\", \"lambda_exp_root\", \"lambda_weib_root\", \"p_root\", \"p_precision\", \"events\" )\n  params <- transform(params, lambda_exp_root = as.numeric(lambda_exp_root), lambda_weib_root = as.numeric(lambda_weib_root), p_root = as.numeric(p_root), p_precision = as.numeric(p_precision), events = as.numeric(events))\n  \n}\n\n\n\n\n\n## plots p and log(p) histograms given a params list (computed by parameters function)\n## for dataframe params \n\np_hists <- function(params){\n  params <-  params[!is.na(params[\"p_root\"]),] #select nodes with p root defined\n  p_roots <- params[, \"p_root\"]\n  h <- hist(p_roots, breaks = 30, plot = FALSE)\n  plot(h,  main = paste(\"Histogram of \",prot, \" p\"), xlab = \"p\")\n  lh <- hist(log(p_roots), breaks = 30, plot = FALSE)\n  plot(lh,  main = paste(\"Histogram of \",prot, \" log(p)\"), xlab = \"log(p)\")\n}\n\n\n## selects lamdas corresponding to  p>threshold if right == TRUE \n## ( p <= threshold if right == FALSE)\n## and plots a histogram \n\nlambda_hist <- function(prot, params, threshold, right = TRUE){\n  params <-  params[!is.na(params[\"p_root\"]),] #select nodes with p root defined\n  p_roots <- params[, \"p_root\"]\n  if (right){\n    lambdas <- params[params[\"p_root\"] > threshold, \"lambda_weib_root\"]\n    sign = \">\"\n  }\n  else {\n    lambdas <- params[params[\"p_root\"] <= threshold, \"lambda_weib_root\"]\n    sign = \"<=\"\n  }\n\n  h <- hist(lambdas, breaks = 30, plot = FALSE)\n  plot(h,  main = paste(\"Histogram of \",prot, \" lambda for p\", sign, \" \", threshold), xlab = \"lambda\")\n  h <- hist(log(lambdas), breaks = 30, plot = FALSE)\n  plot(h,  main = paste(\"Histogram of \",prot, \" log(lambda) for p\", sign, \" \", threshold), xlab = \"lambda\")\n}\n",
    "created" : 1459939066689.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3705719722",
    "id" : "58082BA6",
    "lastKnownWriteTime" : 1461936579,
    "path" : "C:/Users/weidewind/workspace/evolike/R/MLE_parameters.R",
    "project_path" : "R/MLE_parameters.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}