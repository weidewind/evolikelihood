{
    "contents" : "## EM algorithm\n\n\n## prepare data\n\n\n## clusterize observed MLE parameters\n## construct rk vectors (1/0) for EM (based on cluster membership)\n## find initial a (and b) parameters for EM (maximisation)\n## compute initial weights based on (1/0) rk vectors (expectation)\n## returns list with two values: vector of weights and matrix of parameters\n\nparams_list_to_df <- function(params){\n  if (class(params) != \"list\"){\n    stop (paste (c(\"Invalid argument type: \", class(params), \"instead of list\" )))\n  }\n  params <- data.frame(matrix(unlist(params), nrow=length(params), byrow=T),stringsAsFactors=FALSE)\n  names(params) <- c(\"node\", \"lambda_exp_root\", \"lambda_root\", \"p_root\", \"p_precision\" )\n  params <- transform(params, lambda_exp_root = as.numeric(lambda_exp_root), lambda_root = as.numeric(lambda_root), p_root = as.numeric(p_root), p_precision = as.numeric(p_precision))\n  \n}\n\n\ninitialize_by_clustering <- function (data, parameters, mutation_position = \"middle\", cluster.number = 4){\n  params <- params_list_to_df(parameters)\n  filtered <-params[!is.na(params$p_precision) ,]\n  filtered <-filtered[filtered$p_precision< 1e-5  ,]\n  df <-filtered[,c(\"lambda_root\", \"p_root\")]\n  \n  clusters <-kmeans(df, cluster.number)\n  categories <- seq(from = 1, to = cluster.number, by = 1)\n  rkvectors <- sapply(categories, function(k){\n    rk <-sapply(clusters$cluster, function(category){\n      if (category == k){1} \n      else {0}\n    })\n  })\n  rownames(rkvectors) <- filtered$node\n  \n  parameters(data, mutation_position = \"end\", rkvector, filter = TRUE, jack = FALSE, pack = \"rootsolve\", verbose = FALSE)\n  \n\n  \n  \n  \n  list(iparameters = parameters, iweights = weights)\n}\n\n## alternative: choose random a (and b) \n## set equal weights for all categories\n## returns list with two values: vector of weights and matrix of parameters\n\ninitialize_random <- function (){\n\n  list(parameters = parameters, weights = weights)\n}\n\n\n## initialization interface\ninitialize <- function (method = \"cluster\"){\n  if (method == \"cluster\") {\n    initialize_by_clustering()\n  }\n  else if (method == \"random\"){\n    initialize_random()\n  }\n  else {\n    stop (paste (\"Invalid initialization method \", method ))\n  }\n  \n}\n\n## EM: E - compute rk vectors and weights of each category\n##     M - given rk, compute new sets of parameters for each category\n\n\n\n\n\n\n\n\n\n\n### Procedures \nprot <- \"h1\"\nprot_data <-  read.csv(paste(c(getwd(), \"/input/\" ,prot,\"_for_LRT.csv\"), collapse=\"\"),stringsAsFactors=FALSE)  \nsplitted <- split(prot_data, list(prot_data$site, prot_data$ancestor_node), drop=TRUE)\nparams <-parameters(splitted, mutation_position = \"middle\",  filter = TRUE, jack = FALSE, pack = \"rootsolve\", verbose = FALSE)\nparams <- data.frame(matrix(unlist(params), nrow=length(params), byrow=T),stringsAsFactors=FALSE)\nnames(params) <- c(\"node\", \"lambda_exp_root\", \"lambda_root\", \"p_root\", \"p_precision\" )\nparams <- transform(params, lambda_exp_root = as.numeric(lambda_exp_root), lambda_root = as.numeric(lambda_root), p_root = as.numeric(p_root), p_precision = as.numeric(p_precision))\nfiltered <-params[!is.na(params$p_precision) ,]\nfiltered <-filtered[filtered$p_precision< 1e-5  ,]\n#filtered <-filtered[filtered$p_root< 30  ,]\ndf <-filtered[,c(\"lambda_root\", \"p_root\")]\nplot(df$p_root, df$lambda_root, main = \"n2\")\nplot(df$p_root, df$lambda_root, xlim = c(0, 1.5), ylim = c(0, 0.1), main = \"n2\")\nh1_kmeans <-kmeans(df, 3)\n",
    "created" : 1460551453315.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4066539802",
    "id" : "C5603543",
    "lastKnownWriteTime" : 1461150615,
    "path" : "C:/Users/weidewind/workspace/evolikelihood/R/EM.R",
    "project_path" : "R/EM.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}