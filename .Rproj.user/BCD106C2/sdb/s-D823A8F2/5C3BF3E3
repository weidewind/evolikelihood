{
    "collab_server" : "",
    "contents" : "## fishy = FALSE: ln of true likelihood (mutation happens somewhere at the branch, no presumptions about where exactly)\n## of the node_data given exponential model with parameter lambda\n## fishy = TRUE: ln of likelihood computed according to eq (1) on page 1,\n## Adot taken at the middle of the branch, (talpha1-talpha0) = length of the branch\nlnlikelihood_exp <-function(node_data, lambda, fishy = FALSE){\n  if (class(node_data) == \"list\"){\n    node_data <- node_data[[1]]\n  }\n  beta_branches = node_data[node_data[\"event_indicator\"]==0,]\n  alpha_branches = node_data[node_data[\"event_indicator\"]==1,]\n  if (fishy){\n    apply_res1 <- apply( alpha_branches, 1,\n                         function(elm){ \n                           if(!is.na(elm[\"event_indicator\"])){ #if (nrow(dataframe) == 0), <apply> still tries to apply the function to.. header? the list is not empty: it contains the header\n                             talpha1 <- as.numeric(elm[\"t_branch_end\"])\n                             talpha0 <- as.numeric(elm[\"t_branch_start\"])\n                             talpha_middle <- (talpha1+talpha0)/2\n                             log(lambda)+log(talpha1-talpha_middle) #changed\n                           }  \n                           else { 0 }\n                         })\n  }\n  else {\n    apply_res1 <- apply( alpha_branches, 1,\n                         function(elm){ \n                           if(!is.na(elm[\"event_indicator\"])){ #if (nrow(dataframe) == 0), <apply> still tries to apply the function to.. header? the list is not empty: it contains the header\n                             talpha1 <- as.numeric(elm[\"t_branch_end\"])\n                             talpha0 <- as.numeric(elm[\"t_branch_start\"])\n                             survival <- exp(lambda*(talpha0-talpha1))\n                             log(1-survival)\n                           }  \n                           else { 0 }\n                         })\n  }\n  apply_res2 <-  apply( beta_branches, 1,\n                        function(elm){ \n                          if(!is.na(elm[\"event_indicator\"])){ #if (nrow(dataframe) == 0), <apply> still tries to apply the function to.. header? the list is not empty: it contains the header\n                            tbeta1 <- as.numeric(elm[\"t_branch_end\"])\n                            tbeta0 <- as.numeric(elm[\"t_branch_start\"])\n                            tbeta0 -  tbeta1\n                          }  \n                          else { 0 }\n     \n                          })\n  #added\n  if(fishy){\n      apply_res3 <-  apply( alpha_branches, 1,\n                        function(elm){ \n                          if(!is.na(elm[\"event_indicator\"])){ #if (nrow(dataframe) == 0), <apply> still tries to apply the function to.. header? the list is not empty: it contains the header\n                            talpha1 <- as.numeric(elm[\"t_branch_end\"])\n                            talpha0 <- as.numeric(elm[\"t_branch_start\"])\n                            talpha_middle <- (talpha1+talpha0)/2\n                            talpha0 -  talpha_middle\n                          }  \n                          else { 0 }\n                        })\n  }\n  \n  if (fishy){\n      lnL <-sum(apply_res1) + lambda*(sum(apply_res2)+sum(apply_res3))\n  }\n  else{\n      lnL <-sum(apply_res1) + lambda*sum(apply_res2)\n  }\n  c(lnL = lnL, AIC = aic(lnL, 1))\n}\n\n## fishy = FALSE: ln of true likelihood (mutation happens somewhere at the branch, no presumptions about where exactly)\n## of the node_data given weibull model with parameters lambda and p\n## fishy = TRUE: ln of likelihood computed according to eq (1) on page 1,\n## Adot taken at the middle of the branch, (talpha1-talpha0) = length of the branch\nlnlikelihood_weibull <-function(node_data, lambda, p, fishy = FALSE){\n  if (class(node_data) == \"list\"){\n    node_data <- node_data[[1]]\n  }\n  beta_branches = node_data[node_data[\"event_indicator\"]==0,]\n  alpha_branches = node_data[node_data[\"event_indicator\"]==1,]\n  if (fishy){\n    apply_res1 <- apply( alpha_branches, 1,\n                         function(elm){ \n                           if(!is.na(elm[\"event_indicator\"])){ #if (nrow(dataframe) == 0), <apply> still tries to apply the function to.. header? the list is not empty: it contains the header\n                             talpha1 <- as.numeric(elm[\"t_branch_end\"])\n                             talpha0 <- as.numeric(elm[\"t_branch_start\"])\n                             talpha_middle <- (talpha1+talpha0)/2\n\n                             #log(p) + p*log(lambda)+(p-1)*log( talpha_middle)+log(talpha1-talpha0)\n                             log(p) + p*log(lambda)+(p-1)*log( talpha_middle)+log(talpha1-talpha_middle)\n                           }  \n                           else { 0 }\n                         })\n    \n  }\n  else {\n    apply_res1 <- apply( alpha_branches, 1,\n                         function(elm){ \n                           if(!is.na(elm[\"event_indicator\"])){ #if (nrow(dataframe) == 0), <apply> still tries to apply the function to.. header? the list is not empty: it contains the header\n                             talpha1 <- as.numeric(elm[\"t_branch_end\"])\n                             talpha0 <- as.numeric(elm[\"t_branch_start\"])\n                             survival <- exp((lambda^p)*(talpha1^p)*( ((talpha0/talpha1)^p) - 1 ))\n                             log(1-survival)\n                           }  \n                           else { 0 }\n                         })\n  }\n  apply_res2 <-  apply( beta_branches, 1,\n                        function(elm){ \n                          if(!is.na(elm[\"event_indicator\"])){ #if (nrow(dataframe) == 0), <apply> still tries to apply the function to.. header? the list is not empty: it contains the header\n                            tbeta1 <- as.numeric(elm[\"t_branch_end\"])\n                            tbeta0 <- as.numeric(elm[\"t_branch_start\"])\n                            (tbeta1^p)*( ((tbeta0/tbeta1)^p) - 1 )  \n                          }  \n                          else { 0 }\n                        })\n  ## added\n  if (fishy){\n      apply_res3 <-  apply( alpha_branches, 1,\n                        function(elm){ \n                          if(!is.na(elm[\"event_indicator\"])){ #if (nrow(dataframe) == 0), <apply> still tries to apply the function to.. header? the list is not empty: it contains the header\n                            talpha1 <- as.numeric(elm[\"t_branch_end\"])\n                            talpha0 <- as.numeric(elm[\"t_branch_start\"])\n                            talpha_middle <- (talpha1+talpha0)/2\n                            (talpha_middle^p)*( ((talpha0/talpha_middle)^p) - 1 )  \n                          }  \n                          else { 0 }\n                        })\n  }\n  \n  \n  if (fishy){\n      lnL <-sum(apply_res1) + (lambda^p)*(sum(apply_res2)+sum(apply_res3))\n  }\n  else {\n      lnL <-sum(apply_res1) + (lambda^p)*sum(apply_res2)\n  }\n\n  c(lnL = lnL, AIC = aic(lnL, 2))\n}\n\n# lnl - loglikelihood, p - number of parameters in the model\naic <- function (lnL, p){\n  2*(p-lnL)\n}\n\n# LR  LR = 2*(lnL1-lnL2) approximately follows a chi-square distribution with 1 degree of freedom\nlrt <- function (node_data, lambda_exp, lambda_weib, p, fishy = FALSE, verbose = FALSE){\n  weibull <- lnlikelihood_weibull(node_data, lambda = lambda_weib, p = p, fishy)\n  exponential <- lnlikelihood_exp(node_data, lambda = lambda_exp, fishy)\n  LR <- 2*(weibull[1]-exponential[1])\n  if(verbose){\n    print (\"weibull\")\n    print (weibull)\n    print (\"exponential\")\n    print (exponential)\n    print (\"LR\")\n    print (LR)\n  }\n  LR\n}\n\n\n\n\n## Compute LR\n## takes an already computed set of parameters (with parameters(..., filter=FALSE))\n## OR, if parameters = NULL, computes them \n## ! mutation_position and parameters cannot be defined simultaneously\n## threshold - significance threshold (default - 3.84, value of chi-square distr with 1 degree of freedom for sign level 0.05)\n## Prints parameters and lr for significant nodes\n## outputs parameters and lr for all nodes\n## files like \"h1_single_root_31_03_truelambda_fishy\" were printed here\n\nlrt_procedure <-function(data, prot, tag, fishy = FALSE, threshold = 3.84,  mutation_position = \"end\", parameters = NULL){\n # if (!is.null(parameters)){\n #   warning(\"Parameters are defined, therefore mutation_position will be ignored\")\n  #}\n  sink(file = paste(c(\"C:/Users/weidewind/workspace/perlCoevolution/TreeUtils/Phylo/MutMap/likelihood/nsyn/\",prot,\"_single_root_\", tag), collapse=\"\"), append = FALSE, type = c(\"output\", \"message\"),\n       split = FALSE)\n  \n  if (!is.null(parameters)){\n    parameters <- data.frame(matrix(unlist(parameters), nrow=length(parameters), byrow=T),stringsAsFactors=FALSE)\n    names(parameters) <- c(\"node\", \"lambda_exp_root\", \"lambda_root\", \"p_root\", \"p_precision\" )\n    parameters <- transform(parameters, lambda_exp_root = as.numeric(lambda_exp_root), lambda_root = as.numeric(lambda_root), p_root = as.numeric(p_root), p_precision = as.numeric(p_precision))\n  }\n  \n  lratios <- lapply (names(data), function(elm, mutation_position){\n    mutation_position <- mutation_position\n    node_data <- data[elm]\n    if (is.null(parameters)){\n      node_roots <- as.list(find_single_root(node_data, mutation_position))\n    }\n    else {\n      node_roots <- parameters[parameters$node == elm,]\n    }\n    if(!is.na(node_roots) && all(!is.na(node_roots)) && node_roots$p_precision < 1e-5  ){\n      \n      lr <-lrt (node_data, lambda_exp = node_roots$lambda_exp_root, lambda_weib = node_roots$lambda_root, p = node_roots$p_root, fishy= TRUE, verbose=FALSE)\n      row <- c(node = elm,  lambda_exp = node_roots$lambda_exp_root, lambda_weib = node_roots$lambda_root, p = node_roots$p_root, p_precision = node_roots$p_precision, lr = lr)\n      if(!is.na(lr) && lr > threshold){\n        print (c(node = elm,  lambda_exp = node_roots$lambda_exp_root, lambda_weib = node_roots$lambda_root, p = node_roots$p_root, p_precision = node_roots$p_precision, lr = lr))\n      }\n    } \n    else {\n      row <- c(node = elm,  lambda_exp = node_roots$lambda_exp_root, lambda_weib = node_roots$lambda_root, p = node_roots$p_root, p_precision = node_roots$p_precision, lr = NA) \n    }\n  }, mutation_position)\n  sink()\n  \n  lratios\n}\n\nprot <- \"h1\"\nprot_data <-  read.csv(paste(c(\"C:/Users/weidewind/workspace/perlCoevolution/TreeUtils/Phylo/MutMap/likelihood/nsyn/\",prot,\"_for_LRT.csv\"), collapse=\"\"),stringsAsFactors=FALSE)  \nsplitted <- split(prot_data, list(prot_data$site, prot_data$ancestor_node), drop=TRUE)\nh1_prms <-parameters(splitted, fishy = TRUE, filter= FALSE)\nlrt_procedure(data = splitted, prot = prot, tag = \"without_negative_roots_step_3\", fishy=TRUE, parameters = h1_prms)\nsink()\nprot <- \"h3\"\nprot_data <-  read.csv(paste(c(\"C:/Users/weidewind/workspace/perlCoevolution/TreeUtils/Phylo/MutMap/likelihood/nsyn/\",prot,\"_for_LRT.csv\"), collapse=\"\"),stringsAsFactors=FALSE)  \nsplitted <- split(prot_data, list(prot_data$site, prot_data$ancestor_node), drop=TRUE)\nh3_prms <-parameters(splitted, fishy = TRUE, filter= FALSE)\nlrt_procedure(data = splitted, prot = prot, tag = \"without_negative_roots\", fishy=TRUE, parameters = h3_prms)\nsink()\nprot <- \"n1\"\nprot_data <-  read.csv(paste(c(\"C:/Users/weidewind/workspace/perlCoevolution/TreeUtils/Phylo/MutMap/likelihood/nsyn/\",prot,\"_for_LRT.csv\"), collapse=\"\"),stringsAsFactors=FALSE)  \nsplitted <- split(prot_data, list(prot_data$site, prot_data$ancestor_node), drop=TRUE)\nn1_prms <-parameters(splitted, fishy = TRUE, filter= FALSE)\nlrt_procedure(data = splitted, prot = prot, tag = \"without_negative_roots\", fishy=TRUE, parameters = n1_prms)\nsink()\nprot <- \"n2\"\nprot_data <-  read.csv(paste(c(\"C:/Users/weidewind/workspace/perlCoevolution/TreeUtils/Phylo/MutMap/likelihood/nsyn/\",prot,\"_for_LRT.csv\"), collapse=\"\"),stringsAsFactors=FALSE)  \nsplitted <- split(prot_data, list(prot_data$site, prot_data$ancestor_node), drop=TRUE)\nn2_prms <-parameters(splitted, fishy = TRUE, filter= FALSE)\nlrt_procedure(data = splitted, prot = prot, tag = \"without_negative_roots\", fishy=TRUE, parameters = n2_prms)\nsink()\n\n\n###\n\n\n",
    "created" : 1460620683114.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1169512566",
    "id" : "5C3BF3E3",
    "lastKnownWriteTime" : 1460797278,
    "last_content_update" : 1460797278,
    "path" : "C:/workspace/evolikelihood/R/LRT.R",
    "project_path" : "R/LRT.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}