lrt_procedure
devtools::load_all("evolike")
library(evolike)
library(evolikelihood)
lrt_procedure
devtools::load_all()
devtools::load_all
devtools::load_all()
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0)
devtools::load_code()
devtools::load_all("./")
devtools::load_all(".\")
/
""
q
qw
wq
"
devtools::load_all("/")
devtools::load_all()
source('C:/Users/weidewind/workspace/evolike/demo/actions.R')
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
source.with.encoding('C:/Users/weidewind/workspace/evolike/R/MLE_parameters.R', encoding='UTF-8')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0)
fr <-c (wei = "we", ex = "ex")
fr$wei
fr["wei"]
fr <-list(wei = "we", ex = "ex")
fr$wei
sink()
sink()
sink()
fr <-c (wei = "we", ex = "ex")
fr["wei"]
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0)
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0, all = TRUE)
lr = c(exponential = 1, weibull = 2, lr = 3)
lr["exponential"]
sink()
sink()
lr["exponential"]
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0, all = TRUE)
lr = c(exponential = 1, weibull = 2, lr = 3)
lr$exp
names(lr) <-c("f", "g", "h")
lr$f
lr["f"]
sink()
sink()
lr["f"]
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0, all = TRUE)
lrt
sink()
sink()
lrt
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0, all = TRUE)
prot <- "h1"
prot_data <-  read.csv(paste(c(getwd(), "/data/" ,prot,"_for_LRT.csv"), collapse=""),stringsAsFactors=FALSE)
splitted <- split(prot_data, list(prot_data$site, prot_data$ancestor_node), drop=TRUE)
params <-parameters(splitted, mutation_position = "middle",  filter = TRUE, jack = FALSE, pack = "rootsolve", verbose = FALSE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_all(mutation_position = "middle", params = params, fishy = TRUE, tag = "all_subtrees", pack = "rootsolve", verbose = TRUE, threshold = 0, all = TRUE)
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = all)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
source('~/.active-rstudio-document')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = all)
sink()
sink()
sink()
sink()
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = all)
params <-parameters(splitted, mutation_position = "middle",  filter = FALSE, jack = FALSE, pack = "rootsolve", verbose = FALSE)
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = all)
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
params <-parameters(splitted, mutation_position = "middle",  filter = TRUE, jack = FALSE, pack = "rootsolve", verbose = FALSE)
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
lrt_procedure(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
dumb_wood_likelihood(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/LRT.R')
dumb_wood_likelihood(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
proth3 <- "h3"
prot_datah3 <-  read.csv(paste(c(getwd(), "/data/" ,proth3,"_for_LRT.csv"), collapse=""),stringsAsFactors=FALSE)
splittedh3 <- split(prot_datah3, list(prot_datah3$site, prot_datah3$ancestor_node), drop=TRUE)
paramsh3 <-parameters(splittedh3, mutation_position = "middle",  filter = TRUE, jack = FALSE, pack = "rootsolve", verbose = FALSE)
protn1 <- "n1"
prot_datan1 <-  read.csv(paste(c(getwd(), "/data/" ,protn1,"_for_LRT.csv"), collapse=""),stringsAsFactors=FALSE)
splittedn1 <- split(prot_datan1, list(prot_datan1$site, prot_datan1$ancestor_node), drop=TRUE)
paramsn1 <-parameters(splittedn1, mutation_position = "middle",  filter = TRUE, jack = FALSE, pack = "rootsolve", verbose = FALSE)
protn2 <- "n2"
prot_datan2 <-  read.csv(paste(c(getwd(), "/data/" ,protn2,"_for_LRT.csv"), collapse=""),stringsAsFactors=FALSE)
splittedn2 <- split(prot_datan2, list(prot_datan2$site, prot_datan2$ancestor_node), drop=TRUE)
paramsn2 <-parameters(splittedn2, mutation_position = "middle",  filter = TRUE, jack = FALSE, pack = "rootsolve", verbose = FALSE)
#params <-parameters(splitted, mutation_position = "middle",  filter = FALSE, jack = FALSE, pack = "rootsolve", verbose = FALSE)
#dumb_wood_likelihood(data = splitted, prot = prot, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = params, threshold = 0, all = TRUE)
dumb_wood_likelihood(data = splittedh3, prot = proth3, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = paramsh3, threshold = 0, all = TRUE)
dumb_wood_likelihood(data = splittedn2, prot = protn2, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = paramsn2, threshold = 0, all = TRUE)
dumb_wood_likelihood(data = splittedn1, prot = protn1, mutation_position = "middle", tag = "all_subtrees", fishy=TRUE, params = paramsn1, threshold = 0, all = TRUE)
source('C:/Users/weidewind/workspace/evolike/R/ParseOutput.R')
prot <- "h3"
categories <- 1
model <- "exponential" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
source('C:/Users/weidewind/workspace/evolike/R/ParseOutput.R')
prot <- "h3"
categories <- 1
model <- "exponential" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
sink()
prot <- "h3"
categories <- 1
model <- "exponential" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
sink()
sink()
prot <- "h3"
categories <- 1
model <- "exponential" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
source('C:/Users/weidewind/workspace/evolike/R/ParseOutput.R')
prot <- "h3"
categories <- 1
model <- "exponential" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
sink()
source('C:/Users/weidewind/workspace/evolike/R/ParseOutput.R')
prot <- "h3"
categories <- 1
model <- "exponential" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
prot <- "h3"
categories <- 1
model <- "exponential" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
em_output
prot <- "h3"
categories <- 1
model <- "weibulll" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
em_output
prot <- "h3"
categories <- 1
model <- "weibulll" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
em_output
prot <- "h3"
categories <- 1
model <- "weibull" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
em_output
prot <- "h1"
categories <- 1
model <- "exponential" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
em_output
prot <- "h1"
categories <- 1
model <- "weibull" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
em_output
prot <- "n2"
categories <- 1
model <- "weibull" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
em_output
prot <- "n2"
categories <- 1
model <- "exponential" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
em_output
prot <- "n1"
categories <- 1
model <- "exponential" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
em_output
prot <- "n1"
categories <- 1
model <- "weibull" # weibull or exponential
#em_output <- parse_em_output(prot, model, categories)
em_output <- parse_group_output(prot, model, categories)
em_output
cluster.number <- 4
model <- "weibull"
categories <- seq(from = 1, to = cluster.number, by = 1)
new_params <-matrix(nrow = cluster.number, ncol = 2)
colnames(new_params) = c("lambda", "p")
for (k in categories){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
new_params[k, "p"]  <- k_params["p_root"]
new_params[k, "lambda"]  <- k_params["lambda_weib_root"]
}
else {
new_params[k, "lambda"]  <- k_params["lambda_exp_root"]
}
}
new_params
new_params <- sapply(categories, function(k){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
c(k_params["p_root"], k_params["lambda_exp_root"])
})
output <- matrix(unlist(new_params), ncol = 2, byrow = TRUE)
output
new_params <- sapply(categories, function(k){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
c(k_params["lambda_weib_root"], k_params["p_root"])
})
output <- matrix(unlist(new_params), ncol = 2, byrow = TRUE)
output
model <- "weibull"
categories <- seq(from = 1, to = cluster.number, by = 1)
new_params <-matrix(nrow = cluster.number, ncol = 2)
colnames(new_params) = c("lambda", "p")
for (k in categories){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
new_params[k, "p"]  <- k_params["p_root"]
new_params[k, "lambda"]  <- k_params["lambda_weib_root"]
}
else {
new_params[k, "lambda"]  <- k_params["lambda_exp_root"]
}
}
new_params
brand_new_params <- sapply(categories, function(k){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
c(k_params["lambda_weib_root"], k_params["p_root"])
} else {
c(k_params["lambda_exp_root"])
}
})
output <- matrix(unlist(brand_new_params), ncol = 2, byrow = TRUE)
colnames(output) = c("lambda", "p")
output
cluster.number <- 4
model <- "exponential"
categories <- seq(from = 1, to = cluster.number, by = 1)
new_params <-matrix(nrow = cluster.number, ncol = 2)
colnames(new_params) = c("lambda", "p")
for (k in categories){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
new_params[k, "p"]  <- k_params["p_root"]
new_params[k, "lambda"]  <- k_params["lambda_weib_root"]
}
else {
new_params[k, "lambda"]  <- k_params["lambda_exp_root"]
}
}
new_params
brand_new_params <- sapply(categories, function(k){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
c(k_params["lambda_weib_root"], k_params["p_root"])
} else {
c(k_params["lambda_exp_root"])
}
})
output <- matrix(unlist(brand_new_params), ncol = 2, byrow = TRUE)
colnames(output) = c("lambda", "p")
output
cluster.number <- 4
model <- "exponential"
categories <- seq(from = 1, to = cluster.number, by = 1)
if (model == "weibull"){
new_params <-matrix(nrow = cluster.number, ncol = 2)
colnames(new_params) = c("lambda", "p")
}
else {
new_params <-matrix(nrow = cluster.number, ncol = 1)
colnames(new_params) = c("lambda")
}
for (k in categories){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
new_params[k, "p"]  <- k_params["p_root"]
new_params[k, "lambda"]  <- k_params["lambda_weib_root"]
}
else {
new_params[k, "lambda"]  <- k_params["lambda_exp_root"]
}
}
new_params
brand_new_params <- sapply(categories, function(k){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
c(k_params["lambda_weib_root"], k_params["p_root"])
} else {
c(k_params["lambda_exp_root"])
}
})
if(model == "weibull"){
output <- matrix(unlist(brand_new_params), ncol = 2, byrow = TRUE)
colnames(output) = c("lambda", "p")
}
else {
output <- matrix(unlist(brand_new_params), ncol = 1, byrow = TRUE)
colnames(output) = c("lambda")
}
output
cluster.number <- 4
model <- "exponential"
categories <- seq(from = 1, to = cluster.number, by = 1)
if (model == "weibull"){
new_params <-matrix(nrow = cluster.number, ncol = 2)
colnames(new_params) = c("lambda", "p")
}
else {
new_params <-matrix(nrow = cluster.number, ncol = 1)
colnames(new_params) = c("lambda")
}
for (k in categories){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
new_params[k, "p"]  <- k_params["p_root"]
new_params[k, "lambda"]  <- k_params["lambda_weib_root"]
}
else {
new_params[k, "lambda"]  <- k_params["lambda_exp_root"]
}
}
new_params
brand_new_params <- sapply(categories, function(k){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
c(k_params["lambda_weib_root"], k_params["p_root"])
} else {
c(k_params["lambda_exp_root"])
}
})
if(model == "weibull"){
output <- matrix(unlist(brand_new_params), ncol = 2, byrow = TRUE)
colnames(output) = c("lambda", "p")
} else {
output <- matrix(unlist(brand_new_params), ncol = 1, byrow = TRUE)
colnames(output) = c("lambda")
}
output
cluster.number <- 4
model <- "weibull"
categories <- seq(from = 1, to = cluster.number, by = 1)
if (model == "weibull"){
new_params <-matrix(nrow = cluster.number, ncol = 2)
colnames(new_params) = c("lambda", "p")
}
else {
new_params <-matrix(nrow = cluster.number, ncol = 1)
colnames(new_params) = c("lambda")
}
for (k in categories){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
new_params[k, "p"]  <- k_params["p_root"]
new_params[k, "lambda"]  <- k_params["lambda_weib_root"]
}
else {
new_params[k, "lambda"]  <- k_params["lambda_exp_root"]
}
}
new_params
brand_new_params <- sapply(categories, function(k){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
c(k_params["lambda_weib_root"], k_params["p_root"])
} else {
c(k_params["lambda_exp_root"])
}
})
if(model == "weibull"){
output <- matrix(unlist(brand_new_params), ncol = 2, byrow = TRUE)
colnames(output) = c("lambda", "p")
} else {
output <- matrix(unlist(brand_new_params), ncol = 1, byrow = TRUE)
colnames(output) = c("lambda")
}
output
cluster.number <- 4
model <- "weibull"
categories <- seq(from = 1, to = cluster.number, by = 1)
if (model == "weibull"){
new_params <-matrix(nrow = cluster.number, ncol = 2)
colnames(new_params) = c("lambda", "p")
} else {
new_params <-matrix(nrow = cluster.number, ncol = 1)
colnames(new_params) = c("lambda")
}
for (k in categories){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
new_params[k, "p"]  <- k_params["p_root"]
new_params[k, "lambda"]  <- k_params["lambda_weib_root"]
} else {
new_params[k, "lambda"]  <- k_params["lambda_exp_root"]
}
}
new_params
brand_new_params <- sapply(categories, function(k){
k_params <-     c(p_root = 0.7*k, p_precision = 0.01,
lambda_weib_root = 0.6*k, lambda_exp_root = 0.5*k)
if (model == "weibull"){
c(k_params["lambda_weib_root"], k_params["p_root"])
} else {
c(k_params["lambda_exp_root"])
}
})
if(model == "weibull"){
output <- matrix(unlist(brand_new_params), ncol = 2, byrow = TRUE)
colnames(output) = c("lambda", "p")
} else {
output <- matrix(unlist(brand_new_params), ncol = 1, byrow = TRUE)
colnames(output) = c("lambda")
}
output
getOption("cores")
mysum <- function(a,b){
a+b
}
myprod <- function(a,b){
a*b
}
mytest <- function(a,b, func){
func(a,b)
}
mytest(3,4,mysum)
mysum <- function(a,b){
a+b
}
myprod <- function(a,b){
a*b
}
mytest <- function(a,b, func){
func(a,b)
}
mytest(3,4,myprod)
