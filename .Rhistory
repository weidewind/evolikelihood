})
points(firstl, firstw, col= color.gradient(bics), pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
if (length(cluster) > 0){
# only first cluster for all files
for (c in seq(1, categories, 1)){
points(cluster[[1]]$params[c,4], cluster[[1]]$params[c,3], col= color.gradient(bics), pch=17)
}
}
}
##
print (paste ("best bic", names(head(sorted_bics, 1)), head(sorted_bics, 1)))
print (paste ("worst bic", names(tail(sorted_bics, 1)),tail(sorted_bics, 1)))
print (paste ("diff", tail(sorted_bics, 1)-head(sorted_bics, 1)))
}
prot <- "n1"
categories <- 3
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
show_em_all_results <- function (em_output, model = c("weibull", "exponential")){
bics <- sapply(em_output, function (elm){
elm$bic
})
sorted_bics <-sort(bics)
print (length(sorted_bics))
print (sorted_bics)
if (model == "weibull"){
myplot <- scatterplot3d(0,0,0, color= "white", type="h", xlab = "lambda", ylab = "p", zlab = "weight", xlim = c(0, 0.1), ylim = c(0,10), zlim = c(0,1), pch=19)
for (c in seq(1, categories, 1)){
firstl <- sapply(em_output, function (e){
e$params[c,1]
})
firstp <- sapply(em_output, function (e){
e$params[c,2]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
# only first cluster for all files
myplot$points3d(firstl, firstp, firstw, col= color.gradient(bics), type="h", pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print(cluster)
# only first cluster for all files
if (length(cluster) > 0){
for (c in seq(1, categories, 1)){
myplot$points3d(cluster[[1]]$params[c,1], cluster[[1]]$params[c,2], cluster[[1]]$params[c,3], col= color.gradient(bics), type="h", pch=17)
}
}
}
else {
myplot <- plot(0,0, col= "white",  xlim = c(0, 0.1), ylim = c(0,1), xlab = "lambda", ylab = "weight", pch=19)
for (c in seq(1,categories,1)){
firstl <- sapply(em_output, function (e){
e$params[c,4]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
points(firstl, firstw, col= color.gradient(bics), pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print(cluster)
if (length(cluster) > 0){
# only first cluster for all files
for (c in seq(1, categories, 1)){
points(cluster[[1]]$params[c,4], cluster[[1]]$params[c,3], col= color.gradient(bics), pch=17)
}
}
}
##
print (paste ("best bic", names(head(sorted_bics, 1)), head(sorted_bics, 1)))
print (paste ("worst bic", names(tail(sorted_bics, 1)),tail(sorted_bics, 1)))
print (paste ("diff", tail(sorted_bics, 1)-head(sorted_bics, 1)))
}
prot <- "n1"
categories <- 3
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
show_em_all_results <- function (em_output, model = c("weibull", "exponential")){
bics <- sapply(em_output, function (elm){
elm$bic
})
sorted_bics <-sort(bics)
print (length(sorted_bics))
print (sorted_bics)
if (model == "weibull"){
myplot <- scatterplot3d(0,0,0, color= "white", type="h", xlab = "lambda", ylab = "p", zlab = "weight", xlim = c(0, 0.1), ylim = c(0,10), zlim = c(0,1), pch=19)
for (c in seq(1, categories, 1)){
firstl <- sapply(em_output, function (e){
e$params[c,1]
})
firstp <- sapply(em_output, function (e){
e$params[c,2]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
# only first cluster for all files
myplot$points3d(firstl, firstp, firstw, col= color.gradient(bics), type="h", pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print(sorted_bic[sorted_bic<cluster[[1]]$bic])
# only first cluster for all files
if (length(cluster) > 0){
for (c in seq(1, categories, 1)){
myplot$points3d(cluster[[1]]$params[c,1], cluster[[1]]$params[c,2], cluster[[1]]$params[c,3], col= color.gradient(bics), type="h", pch=17)
}
}
}
else {
myplot <- plot(0,0, col= "white",  xlim = c(0, 0.1), ylim = c(0,1), xlab = "lambda", ylab = "weight", pch=19)
for (c in seq(1,categories,1)){
firstl <- sapply(em_output, function (e){
e$params[c,4]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
points(firstl, firstw, col= color.gradient(bics), pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print(cluster)
print(sorted_bic[sorted_bic<cluster[[1]]$bic])
if (length(cluster) > 0){
# only first cluster for all files
for (c in seq(1, categories, 1)){
points(cluster[[1]]$params[c,4], cluster[[1]]$params[c,3], col= color.gradient(bics), pch=17)
}
}
}
##
print (paste ("best bic", names(head(sorted_bics, 1)), head(sorted_bics, 1)))
print (paste ("worst bic", names(tail(sorted_bics, 1)),tail(sorted_bics, 1)))
print (paste ("diff", tail(sorted_bics, 1)-head(sorted_bics, 1)))
}
prot <- "n1"
categories <- 3
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
show_em_all_results <- function (em_output, model = c("weibull", "exponential")){
bics <- sapply(em_output, function (elm){
elm$bic
})
sorted_bics <-sort(bics)
print (length(sorted_bics))
print (sorted_bics)
if (model == "weibull"){
myplot <- scatterplot3d(0,0,0, color= "white", type="h", xlab = "lambda", ylab = "p", zlab = "weight", xlim = c(0, 0.1), ylim = c(0,10), zlim = c(0,1), pch=19)
for (c in seq(1, categories, 1)){
firstl <- sapply(em_output, function (e){
e$params[c,1]
})
firstp <- sapply(em_output, function (e){
e$params[c,2]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
# only first cluster for all files
myplot$points3d(firstl, firstp, firstw, col= color.gradient(bics), type="h", pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print(sorted_bics[sorted_bics<cluster[[1]]$bic])
# only first cluster for all files
if (length(cluster) > 0){
for (c in seq(1, categories, 1)){
myplot$points3d(cluster[[1]]$params[c,1], cluster[[1]]$params[c,2], cluster[[1]]$params[c,3], col= color.gradient(bics), type="h", pch=17)
}
}
}
else {
myplot <- plot(0,0, col= "white",  xlim = c(0, 0.1), ylim = c(0,1), xlab = "lambda", ylab = "weight", pch=19)
for (c in seq(1,categories,1)){
firstl <- sapply(em_output, function (e){
e$params[c,4]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
points(firstl, firstw, col= color.gradient(bics), pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print(cluster)
print(sorted_bics[sorted_bics<cluster[[1]]$bic])
if (length(cluster) > 0){
# only first cluster for all files
for (c in seq(1, categories, 1)){
points(cluster[[1]]$params[c,4], cluster[[1]]$params[c,3], col= color.gradient(bics), pch=17)
}
}
}
##
print (paste ("best bic", names(head(sorted_bics, 1)), head(sorted_bics, 1)))
print (paste ("worst bic", names(tail(sorted_bics, 1)),tail(sorted_bics, 1)))
print (paste ("diff", tail(sorted_bics, 1)-head(sorted_bics, 1)))
}
prot <- "n1"
categories <- 3
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
show_em_all_results <- function (em_output, model = c("weibull", "exponential")){
bics <- sapply(em_output, function (elm){
elm$bic
})
sorted_bics <-sort(bics)
print (length(sorted_bics))
print (sorted_bics)
if (model == "weibull"){
myplot <- scatterplot3d(0,0,0, color= "white", type="h", xlab = "lambda", ylab = "p", zlab = "weight", xlim = c(0, 0.1), ylim = c(0,10), zlim = c(0,1), pch=19)
for (c in seq(1, categories, 1)){
firstl <- sapply(em_output, function (e){
e$params[c,1]
})
firstp <- sapply(em_output, function (e){
e$params[c,2]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
# only first cluster for all files
myplot$points3d(firstl, firstp, firstw, col= color.gradient(bics), type="h", pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print(sorted_bics[sorted_bics<cluster[[1]]$bic])
# only first cluster for all files
if (length(cluster) > 0){
for (c in seq(1, categories, 1)){
myplot$points3d(cluster[[1]]$params[c,1], cluster[[1]]$params[c,2], cluster[[1]]$params[c,3], col= color.gradient(bics), type="h", pch=17)
}
}
}
else {
myplot <- plot(0,0, col= "white",  xlim = c(0, 0.1), ylim = c(0,1), xlab = "lambda", ylab = "weight", pch=19)
for (c in seq(1,categories,1)){
firstl <- sapply(em_output, function (e){
e$params[c,4]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
points(firstl, firstw, col= color.gradient(bics), pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print(cluster)
print ("worse than cluster")
print(length(sorted_bics[sorted_bics<cluster[[1]]$bic]))
print ("equal to cluster")
print(length(sorted_bics[sorted_bics == cluster[[1]]$bic]))
print ("better than cluster")
print(length(sorted_bics[sorted_bics > cluster[[1]]$bic]))
if (length(cluster) > 0){
# only first cluster for all files
for (c in seq(1, categories, 1)){
points(cluster[[1]]$params[c,4], cluster[[1]]$params[c,3], col= color.gradient(bics), pch=17)
}
}
}
##
print (paste ("best bic", names(head(sorted_bics, 1)), head(sorted_bics, 1)))
print (paste ("worst bic", names(tail(sorted_bics, 1)),tail(sorted_bics, 1)))
print (paste ("diff", tail(sorted_bics, 1)-head(sorted_bics, 1)))
}
prot <- "n1"
categories <- 3
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
show_em_all_results <- function (em_output, model = c("weibull", "exponential")){
bics <- sapply(em_output, function (elm){
elm$bic
})
sorted_bics <-sort(bics)
print (length(sorted_bics))
print (sorted_bics)
if (model == "weibull"){
myplot <- scatterplot3d(0,0,0, color= "white", type="h", xlab = "lambda", ylab = "p", zlab = "weight", xlim = c(0, 0.1), ylim = c(0,10), zlim = c(0,1), pch=19)
for (c in seq(1, categories, 1)){
firstl <- sapply(em_output, function (e){
e$params[c,1]
})
firstp <- sapply(em_output, function (e){
e$params[c,2]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
# only first cluster for all files
myplot$points3d(firstl, firstp, firstw, col= color.gradient(bics), type="h", pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print ("better than cluster")
print(length(sorted_bics[sorted_bics<cluster[[1]]$bic]))
print ("equal to cluster")
print(length(sorted_bics[sorted_bics == cluster[[1]]$bic]))
print ("worse than cluster")
print(length(sorted_bics[sorted_bics > cluster[[1]]$bic]))
# only first cluster for all files
if (length(cluster) > 0){
for (c in seq(1, categories, 1)){
myplot$points3d(cluster[[1]]$params[c,1], cluster[[1]]$params[c,2], cluster[[1]]$params[c,3], col= color.gradient(bics), type="h", pch=17)
}
}
}
else {
myplot <- plot(0,0, col= "white",  xlim = c(0, 0.1), ylim = c(0,1), xlab = "lambda", ylab = "weight", pch=19)
for (c in seq(1,categories,1)){
firstl <- sapply(em_output, function (e){
e$params[c,4]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
points(firstl, firstw, col= color.gradient(bics), pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print ("better than cluster")
print(length(sorted_bics[sorted_bics<cluster[[1]]$bic]))
print ("equal to cluster")
print(length(sorted_bics[sorted_bics == cluster[[1]]$bic]))
print ("worse than cluster")
print(length(sorted_bics[sorted_bics > cluster[[1]]$bic]))
if (length(cluster) > 0){
# only first cluster for all files
for (c in seq(1, categories, 1)){
points(cluster[[1]]$params[c,4], cluster[[1]]$params[c,3], col= color.gradient(bics), pch=17)
}
}
}
##
print (paste ("best bic", names(head(sorted_bics, 1)), head(sorted_bics, 1)))
print (paste ("worst bic", names(tail(sorted_bics, 1)),tail(sorted_bics, 1)))
print (paste ("diff", tail(sorted_bics, 1)-head(sorted_bics, 1)))
}
prot <- "n1"
categories <- 3
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "n1"
categories <- 4
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
show_em_all_results <- function (em_output, model = c("weibull", "exponential")){
bics <- sapply(em_output, function (elm){
elm$bic
})
sorted_bics <-sort(bics)
print (length(sorted_bics))
print (sorted_bics)
if (model == "weibull"){
myplot <- scatterplot3d(0,0,0, color= "white", type="h", xlab = "lambda", ylab = "p", zlab = "weight", xlim = c(0, 0.1), ylim = c(0,10), zlim = c(0,1), pch=19)
for (c in seq(1, categories, 1)){
firstl <- sapply(em_output, function (e){
e$params[c,1]
})
firstp <- sapply(em_output, function (e){
e$params[c,2]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
# only first cluster for all files
myplot$points3d(firstl, firstp, firstw, col= color.gradient(bics), type="h", pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print ("better than cluster")
print(length(sorted_bics[sorted_bics<cluster[[1]]$bic]))
print ("equal to cluster")
print(length(sorted_bics[sorted_bics == cluster[[1]]$bic]) - 1)
print ("worse than cluster")
print(length(sorted_bics[sorted_bics > cluster[[1]]$bic]))
# only first cluster for all files
if (length(cluster) > 0){
for (c in seq(1, categories, 1)){
myplot$points3d(cluster[[1]]$params[c,1], cluster[[1]]$params[c,2], cluster[[1]]$params[c,3], col= color.gradient(bics), type="h", pch=17)
}
}
}
else {
myplot <- plot(0,0, col= "white",  xlim = c(0, 0.1), ylim = c(0,1), xlab = "lambda", ylab = "weight", pch=19)
for (c in seq(1,categories,1)){
firstl <- sapply(em_output, function (e){
e$params[c,4]
})
firstw <- sapply(em_output, function (e){
e$params[c,3]
})
points(firstl, firstw, col= color.gradient(bics), pch=19)
}
cluster <- em_output[grep('clu', names(em_output))]
print ("better than cluster")
print(length(sorted_bics[sorted_bics<cluster[[1]]$bic]))
print ("equal to cluster")
print(length(sorted_bics[sorted_bics == cluster[[1]]$bic])- 1)
print ("worse than cluster")
print(length(sorted_bics[sorted_bics > cluster[[1]]$bic]))
if (length(cluster) > 0){
# only first cluster for all files
for (c in seq(1, categories, 1)){
points(cluster[[1]]$params[c,4], cluster[[1]]$params[c,3], col= color.gradient(bics), pch=17)
}
}
}
##
print (paste ("best bic", names(head(sorted_bics, 1)), head(sorted_bics, 1)))
print (paste ("worst bic", names(tail(sorted_bics, 1)),tail(sorted_bics, 1)))
print (paste ("diff", tail(sorted_bics, 1)-head(sorted_bics, 1)))
}
prot <- "n1"
categories <- 4
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "n1"
categories <- 2
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "h1"
categories <- 4
model <- "webull"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "h1"
categories <- 4
model <- "weibull"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "h3"
categories <- 3
model <- "weibull"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "h3"
categories <- 5
model <- "weibull"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "h3"
categories <- 5
model <- "expopnential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "h3"
categories <- 5
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "n1"
categories <- 5
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "n1"
categories <- 5
model <- "weibull"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "n1"
categories <- 5
model <- "weibull"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "n2"
categories <- 5
model <- "weibull"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "n2"
categories <- 1
model <- "weibull"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "n2"
categories <- 2
model <- "weibull"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
prot <- "n2"
categories <- 1
model <- "exponential"
em_output <- parse_em_output(prot, model, categories)
length(em_output)
show_em_all_results(em_output, model)
