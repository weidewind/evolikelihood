dev.set(h3)
myplot3$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", type="h")
dev.set(h4)
myplot4$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black", type="h")
dev.set(h5)
myplot$points3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], col= "red", type="h")
myplot$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", type="h")
myplot$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", type="h")
myplot$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black", type="h")
}
list(parameters=parameters, rkvectors=rkvectors, weights=weights)
}
emlist2 <-em (data=data_filtered, parameters =emlist$parameters, weights=emlist$weights)
em <- function(data, parameters, weights, cluster.number= 4, mutation_position = "middle"){
#todo: data must be filtered (before initialization?), and this new set must be used in em/ params (fo revery node) are not to be confused with cluster paramteres.
#  init <- initialize (data, params=parameters, mutation_position = mutation_position, cluster.number = cluster.number, method = "cluster")
#  parameters <- init$iparameters
#  weights <- init$iiweights
dev.new()
h1=dev.cur()
myplot1 <- scatterplot3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], color= "red", type="h", pch=19, xlim = c(max(parameters[1,"lambda"] - 0.1,0),parameters[1,"lambda"] + 0.1), ylim= c(max(parameters[1,"p"] - 1,0),parameters[1,"p"] + 1), zlim = c(0,1))
dev.new()
h2=dev.cur()
myplot2 <- scatterplot3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], color= "blue", type="h", pch=19, xlim = c(max(parameters[2,"lambda"] - 0.1,0),parameters[2,"lambda"] + 0.1), ylim= c(max(parameters[2,"p"] - 1,0),parameters[2,"p"] + 1), zlim = c(0,1))
dev.new()
h3=dev.cur()
myplot3 <- scatterplot3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], color= "green", type="h", pch=19, xlim = c(max(parameters[3,"lambda"] - 0.1,0),parameters[3,"lambda"] + 0.1), ylim= c(max(parameters[3,"p"] - 1,0),parameters[3,"p"] + 1), zlim = c(0,1))
dev.new()
h4=dev.cur()
myplot4 <- scatterplot3d(parameters[3,"lambda"], parameters[4,"p"], weights[4], color= "black", type="h", pch=19, xlim = c(max(parameters[4,"lambda"] - 0.1,0),parameters[4,"lambda"] + 0.1), ylim= c(max(parameters[4,"p"] - 1,0),parameters[4,"p"] + 1), zlim = c(0,1))
dev.new()
h5=dev.cur()
myplot <- scatterplot3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], color= "red", type="h", xlim = c(0, 0.3), ylim = c(0,4), zlim = c(0,1), pch=19)
dev.set(h5)
myplot$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", pch=19, type="h")
myplot$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", pch=19, type="h")
myplot$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black",pch=19,  type="h")
for (i in c(1,2,3,4,5,6)){
print (paste(c("------------Step ", i), collapse=""))
rkvectors <- compute_rkvectors(data=data, parameters=parameters, weights=weights)
parameters <- compute_params(data=data, rkvectors=rkvectors, mutation_position = mutation_position)
weights <- compute_weights(rkvectors)
print(weights)
dev.set(h1)
myplot1$points3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], col= "red", type="h")
dev.set(h2)
myplot2$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", type="h")
dev.set(h3)
myplot3$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", type="h")
dev.set(h4)
myplot4$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black", type="h")
dev.set(h5)
myplot$points3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], col= "red", type="h")
myplot$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", type="h")
myplot$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", type="h")
myplot$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black", type="h")
}
list(parameters=parameters, rkvectors=rkvectors, weights=weights)
}
emlist2 <-em (data=data_filtered, parameters =emlist$parameters, weights=emlist$weights)
em <- function(data, parameters, weights, cluster.number= 4, mutation_position = "middle"){
#todo: data must be filtered (before initialization?), and this new set must be used in em/ params (fo revery node) are not to be confused with cluster paramteres.
#  init <- initialize (data, params=parameters, mutation_position = mutation_position, cluster.number = cluster.number, method = "cluster")
#  parameters <- init$iparameters
#  weights <- init$iiweights
#  dev.new()
#  h1=dev.cur()
#  myplot1 <- scatterplot3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], color= "red", type="h", pch=19, xlim = c(max(parameters[1,"lambda"] - 0.1,0),parameters[1,"lambda"] + 0.1), ylim= c(max(parameters[1,"p"] - 1,0),parameters[1,"p"] + 1), zlim = c(0,1))
#  dev.new()
#  h2=dev.cur()
#  myplot2 <- scatterplot3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], color= "blue", type="h", pch=19, xlim = c(max(parameters[2,"lambda"] - 0.1,0),parameters[2,"lambda"] + 0.1), ylim= c(max(parameters[2,"p"] - 1,0),parameters[2,"p"] + 1), zlim = c(0,1))
#  dev.new()
#  h3=dev.cur()
# myplot3 <- scatterplot3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], color= "green", type="h", pch=19, xlim = c(max(parameters[3,"lambda"] - 0.1,0),parameters[3,"lambda"] + 0.1), ylim= c(max(parameters[3,"p"] - 1,0),parameters[3,"p"] + 1), zlim = c(0,1))
# dev.new()
#  h4=dev.cur()
# myplot4 <- scatterplot3d(parameters[3,"lambda"], parameters[4,"p"], weights[4], color= "black", type="h", pch=19, xlim = c(max(parameters[4,"lambda"] - 0.1,0),parameters[4,"lambda"] + 0.1), ylim= c(max(parameters[4,"p"] - 1,0),parameters[4,"p"] + 1), zlim = c(0,1))
# dev.new()
# h5=dev.cur()
myplot <- scatterplot3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], color= "red", type="h", xlim = c(0, 0.3), ylim = c(0,4), zlim = c(0,1), pch=19)
# dev.set(h5)
myplot$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", pch=19, type="h")
myplot$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", pch=19, type="h")
myplot$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black",pch=19,  type="h")
for (i in c(1,2,3,4,5,6)){
print (paste(c("------------Step ", i), collapse=""))
rkvectors <- compute_rkvectors(data=data, parameters=parameters, weights=weights)
parameters <- compute_params(data=data, rkvectors=rkvectors, mutation_position = mutation_position)
weights <- compute_weights(rkvectors)
print(weights)
# dev.set(h1)
#  myplot1$points3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], col= "red", type="h")
# dev.set(h2)
# myplot2$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", type="h")
# dev.set(h3)
#  myplot3$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", type="h")
# dev.set(h4)
# myplot4$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black", type="h")
# dev.set(h5)
myplot$points3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], col= "red", type="h")
myplot$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", type="h")
myplot$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", type="h")
myplot$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black", type="h")
}
list(parameters=parameters, rkvectors=rkvectors, weights=weights)
}
em <- function(data, parameters, weights, cluster.number= 4, mutation_position = "middle"){
#todo: data must be filtered (before initialization?), and this new set must be used in em/ params (fo revery node) are not to be confused with cluster paramteres.
#  init <- initialize (data, params=parameters, mutation_position = mutation_position, cluster.number = cluster.number, method = "cluster")
#  parameters <- init$iparameters
#  weights <- init$iiweights
#  dev.new()
#  h1=dev.cur()
#  myplot1 <- scatterplot3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], color= "red", type="h", pch=19, xlim = c(max(parameters[1,"lambda"] - 0.1,0),parameters[1,"lambda"] + 0.1), ylim= c(max(parameters[1,"p"] - 1,0),parameters[1,"p"] + 1), zlim = c(0,1))
#  dev.new()
#  h2=dev.cur()
#  myplot2 <- scatterplot3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], color= "blue", type="h", pch=19, xlim = c(max(parameters[2,"lambda"] - 0.1,0),parameters[2,"lambda"] + 0.1), ylim= c(max(parameters[2,"p"] - 1,0),parameters[2,"p"] + 1), zlim = c(0,1))
#  dev.new()
#  h3=dev.cur()
# myplot3 <- scatterplot3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], color= "green", type="h", pch=19, xlim = c(max(parameters[3,"lambda"] - 0.1,0),parameters[3,"lambda"] + 0.1), ylim= c(max(parameters[3,"p"] - 1,0),parameters[3,"p"] + 1), zlim = c(0,1))
# dev.new()
#  h4=dev.cur()
# myplot4 <- scatterplot3d(parameters[3,"lambda"], parameters[4,"p"], weights[4], color= "black", type="h", pch=19, xlim = c(max(parameters[4,"lambda"] - 0.1,0),parameters[4,"lambda"] + 0.1), ylim= c(max(parameters[4,"p"] - 1,0),parameters[4,"p"] + 1), zlim = c(0,1))
# dev.new()
# h5=dev.cur()
myplot <- scatterplot3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], color= "red", type="h", xlim = c(0, 0.3), ylim = c(0,4), zlim = c(0,1), pch=19)
# dev.set(h5)
myplot$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", pch=19, type="h")
myplot$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", pch=19, type="h")
myplot$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black",pch=19,  type="h")
for (i in seq(1,20,1)){
print (paste(c("------------Step ", i), collapse=""))
rkvectors <- compute_rkvectors(data=data, parameters=parameters, weights=weights)
parameters <- compute_params(data=data, rkvectors=rkvectors, mutation_position = mutation_position)
weights <- compute_weights(rkvectors)
print(weights)
# dev.set(h1)
#  myplot1$points3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], col= "red", type="h")
# dev.set(h2)
# myplot2$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", type="h")
# dev.set(h3)
#  myplot3$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", type="h")
# dev.set(h4)
# myplot4$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black", type="h")
# dev.set(h5)
myplot$points3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], col= "red", type="h")
myplot$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", type="h")
myplot$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", type="h")
myplot$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black", type="h")
}
list(parameters=parameters, rkvectors=rkvectors, weights=weights)
}
em <- function(data, parameters, weights, cluster.number= 4, mutation_position = "middle"){
#todo: data must be filtered (before initialization?), and this new set must be used in em/ params (fo revery node) are not to be confused with cluster paramteres.
#  init <- initialize (data, params=parameters, mutation_position = mutation_position, cluster.number = cluster.number, method = "cluster")
#  parameters <- init$iparameters
#  weights <- init$iiweights
#  dev.new()
#  h1=dev.cur()
#  myplot1 <- scatterplot3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], color= "red", type="h", pch=19, xlim = c(max(parameters[1,"lambda"] - 0.1,0),parameters[1,"lambda"] + 0.1), ylim= c(max(parameters[1,"p"] - 1,0),parameters[1,"p"] + 1), zlim = c(0,1))
#  dev.new()
#  h2=dev.cur()
#  myplot2 <- scatterplot3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], color= "blue", type="h", pch=19, xlim = c(max(parameters[2,"lambda"] - 0.1,0),parameters[2,"lambda"] + 0.1), ylim= c(max(parameters[2,"p"] - 1,0),parameters[2,"p"] + 1), zlim = c(0,1))
#  dev.new()
#  h3=dev.cur()
# myplot3 <- scatterplot3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], color= "green", type="h", pch=19, xlim = c(max(parameters[3,"lambda"] - 0.1,0),parameters[3,"lambda"] + 0.1), ylim= c(max(parameters[3,"p"] - 1,0),parameters[3,"p"] + 1), zlim = c(0,1))
# dev.new()
#  h4=dev.cur()
# myplot4 <- scatterplot3d(parameters[3,"lambda"], parameters[4,"p"], weights[4], color= "black", type="h", pch=19, xlim = c(max(parameters[4,"lambda"] - 0.1,0),parameters[4,"lambda"] + 0.1), ylim= c(max(parameters[4,"p"] - 1,0),parameters[4,"p"] + 1), zlim = c(0,1))
# dev.new()
# h5=dev.cur()
myplot <- scatterplot3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], color= "red", type="h", xlim = c(0, 0.3), ylim = c(0,4), zlim = c(0,1), pch=19)
# dev.set(h5)
myplot$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", pch=19, type="h")
myplot$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", pch=19, type="h")
myplot$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black",pch=19,  type="h")
for (i in seq(1,30,1)){
print (paste(c("------------Step ", i), collapse=""))
rkvectors <- compute_rkvectors(data=data, parameters=parameters, weights=weights)
parameters <- compute_params(data=data, rkvectors=rkvectors, mutation_position = mutation_position)
weights <- compute_weights(rkvectors)
print(weights)
# dev.set(h1)
#  myplot1$points3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], col= "red", type="h")
# dev.set(h2)
# myplot2$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", type="h")
# dev.set(h3)
#  myplot3$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", type="h")
# dev.set(h4)
# myplot4$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black", type="h")
# dev.set(h5)
myplot$points3d(parameters[1,"lambda"], parameters[1,"p"], weights[1], col= "red", type="h")
myplot$points3d(parameters[2,"lambda"], parameters[2,"p"], weights[2], col= "blue", type="h")
myplot$points3d(parameters[3,"lambda"], parameters[3,"p"], weights[3], col= "green", type="h")
myplot$points3d(parameters[4,"lambda"], parameters[4,"p"], weights[4], col= "black", type="h")
}
list(parameters=parameters, rkvectors=rkvectors, weights=weights)
}
emlist3 <-em (data=data_filtered, parameters =init_params, weights=init_weights)
emlist4 <-em (data=data_filtered, parameters =emlist3$parameters, weights=emlist3$weights)
emlist4
emlist3
dirpath <- paste(c(getwd(), "/R/"),collapse= "")
source(paste(c(dirpath, "MLE_functions.R"),collapse= ""))
source(paste(c(dirpath, "MLE_parameters.R"),collapse= ""))
source(paste(c(dirpath, "LRT.R"),collapse= ""))
library('RUnit')
dirpath <- paste(c(getwd(), "/R/"),collapse= "")
source(paste(c(dirpath, "MLE_functions.R"),collapse= ""))
source(paste(c(dirpath, "MLE_parameters.R"),collapse= ""))
source(paste(c(dirpath, "LRT.R"),collapse= ""))
source(paste(c(dirpath, "EM.R"),collapse= ""))
test.suite <- defineTestSuite("basic",
#dirs = file.path("tests"),
paste(c(dirpath, "tests"),collapse= ""),
testFileRegexp = '.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
library('RUnit')
dirpath <- paste(c(getwd(), "/R/"),collapse= "")
source(paste(c(dirpath, "MLE_functions.R"),collapse= ""))
source(paste(c(dirpath, "MLE_parameters.R"),collapse= ""))
source(paste(c(dirpath, "LRT.R"),collapse= ""))
source(paste(c(dirpath, "EM.R"),collapse= ""))
test.suite <- defineTestSuite("basic",
#dirs = file.path("tests"),
paste(c(dirpath, "tests"),collapse= ""),
testFileRegexp = '.R')
test.result <- runTestSuite(test.suite)
library('RUnit')
dirpath <- paste(c(getwd(), "/R/"),collapse= "")
source(paste(c(dirpath, "MLE_functions.R"),collapse= ""))
source(paste(c(dirpath, "MLE_parameters.R"),collapse= ""))
source(paste(c(dirpath, "LRT.R"),collapse= ""))
source(paste(c(dirpath, "EM.R"),collapse= ""))
test.suite <- defineTestSuite("basic",
#dirs = file.path("tests"),
paste(c(dirpath, "tests"),collapse= ""),
testFileRegexp = '.R')
test.result <- runTestSuite(test.suite)
printTextProtocol(test.result)
install.packages("rootSolve")
install.packages("nleqslv")
install.packages("rbenchmark")
install.packages("nleqslv")
install.packages("rbenchmark")
list.of.packages <- c("plotly")
new.packages <- setdiff(list.of.packages, installed.packages()[,"Package"])
print (new.packages)
dirpath <- paste(c(getwd(), "/R/"),collapse= "")
source(paste(c(dirpath, "MLE_functions.R"),collapse= ""))
source(paste(c(dirpath, "MLE_parameters.R"),collapse= ""))
source(paste(c(dirpath, "LRT.R"),collapse= ""))
source(paste(c(dirpath, "EM.R"),collapse= ""))
test.suite <- defineTestSuite("basic",
#dirs = file.path("tests"),
paste(c(dirpath, "tests"),collapse= ""),
testFileRegexp = '.R')
test.result <- runTestSuite(test.suite)
pathnames <- list.files(pattern="^[A-Z].*[.]R$", path=paste(c(getwd(), "/R"),collapse = ""), full.names=TRUE);
sapply(pathnames, FUN=source);
bic <- function (lnL, model = NULL, cluster.number, n){
if (model == "weibull"){
p <- 3*cluster.number -1;
}
else {
p <- 2*cluster.number -1;
}
-2*lnL + p*log(n)
}
pathnames <- list.files(pattern="^[A-Z].*[.]R$", path=paste(c(getwd(), "/R"),collapse = ""), full.names=TRUE);
sapply(pathnames, FUN=source);
sink (paste(c(getwd(), "/output/h1_emtest_1clus"),collapse= ""))
em_results <- em_procedure(data=fdata, params=fparams, model = "weibull",iter = 1000, cluster.number= 1, init_method = "cluster", mutation_position = "middle",  filtering = "single", trace = TRUE)
sink()
sink (paste(c(getwd(), "/output/h1_emtest_1clus"),collapse= ""))
em_results <- em_procedure(data=fdata, params=params, model = "weibull",iter = 1000, cluster.number= 1, init_method = "cluster", mutation_position = "middle",  filtering = "single", trace = TRUE)
sink()
sink (paste(c(getwd(), "/output/h1_emtest_1clus"),collapse= ""))
em_results <- em_procedure(data=splitted, params=params, model = "weibull",iter = 1000, cluster.number= 1, init_method = "cluster", mutation_position = "middle",  filtering = "single", trace = TRUE)
sink()
prot <- "h1"
prot_data <-  read.csv(paste(c(getwd(), "/input/" ,prot,"_for_LRT.csv"), collapse=""),stringsAsFactors=FALSE)
splitted <- split(prot_data, list(prot_data$site, prot_data$ancestor_node), drop=TRUE)
params <-parameters(splitted, mutation_position = "middle",  filter = TRUE, jack = FALSE, pack = "rootsolve", verbose = FALSE)
sink (paste(c(getwd(), "/output/h1_emtest_1clus"),collapse= ""))
em_results <- em_procedure(data=splitted, params=params, model = "weibull",iter = 1000, cluster.number= 1, init_method = "cluster", mutation_position = "middle",  filtering = "single", trace = TRUE)
sink()
install.packages("ArgumentCheck")
library("optparse")
install.packages("optparse")
em <- function(data, model = NULL, parameters, weights, iter = 100, cluster.number= 4, mutation_position = "middle", trace = TRUE){
if (trace){
myplot <- tracer(parameters, weights, cluster.number, init = TRUE)
}
old_lnL <- NULL
for (i in seq(1,iter,1)){
print (paste(c("------------Step ", i), collapse=""))
rkvectors <- compute_rkvectors(data=data, parameters=parameters, model = model, weights=weights)
parameters <- compute_params(data=data, rkvectors=rkvectors, model = model, mutation_position = mutation_position)
weights <- compute_weights(rkvectors)
print(rkvectors)
print(weights)
if (trace){
myplot <- tracer(parameters, weights, cluster.number, myplot = myplot, init = FALSE)
}
model_lnL <- compute_model_lnL(data=data, model = model,parameters=parameters, weights=weights)
print ("model lnL")
print(model_lnL)
if (!is.null(old_lnL) && model_lnL - old_lnL < 0.0001){
break
}
else {old_lnL <- model_lnL}
}
model_bic <- bic(lnL = model_lnL, model = model, cluster.number = cluster.number, n = length(data))
print ("data length")
print (length(data))
print ("model bic")
print(model_bic)
list(parameters=parameters, rkvectors=rkvectors, weights=weights, lnL = model_lnL, bic = model_bic)
}
sink (paste(c(getwd(), "/output/h1_emtest_2cl"),collapse= ""))
em_results <- em_procedure(data=splitted, params=params, model = "weibull",iter = 1000, cluster.number= 2, init_method = "cluster", mutation_position = "middle",  filtering = "single", trace = TRUE)
length(splitted)
sink()
sink()
length(splitted)
log(539)
log(539)*2
2841.464 * 2
-2841.464 * 2 + 12.57943
2841.464 * 2 + 12.57943
em_procedure <-function(data, params, model = NULL, iter = 100, cluster.number= 4, init_method = c("cluster", "random", "by"), init_params = NULL, init_weights = NULL, mutation_position = "middle",  filtering = c("single", "unsolved"), trace = TRUE){
if (filtering == "single"){
fi <- filter_unsolved_and_single(data=data, params=params)
fdata <- fi$fdata
fparams <- fi$fparams
}
else if (filtering == "unsolved"){
fi <- filter_unsolved(data=data, params=params)
fdata <- fi$fdata
fparams <- fi$fparams
}
else {
stop("Invalid argument filtering: must be either single or unsolved")
}
if (init_method == "cluster") {
init <- initialize_by_clustering(data=fdata, params=fparams, model = model, mutation_position = mutation_position, cluster.number = cluster.number)
iparameters <- init$iparameters
iweights <- init$iweights
}
else if (init_method == "random"){
init <- initialize_random(params=fparams, model = model, cluster.number = cluster.number)
iparameters <- init$iparameters
iweights <- init$iweights
}
else if (init_method == "by"){
if (is.null(init_params) || is.null(init_weights)){
stop ("Chosen inititalization method requires init_params and init_weights arguments")
}
init <- initialize_by(init_params, init_weights, model = model, cluster.number = cluster.number)
iparameters <- init$iparameters
iweights <- init$iweights
}
else {
stop (paste ("Invalid initialization method ", method ))
}
print ("Initial parameters:")
print (iparameters)
print (iweights)
em_results <- em(data = fdata, parameters = iparameters, model = model, weights = iweights, iter= iter, mutation_position = mutation_position, cluster.number = cluster.number, trace = trace)
}
em <- function(data, model = NULL, parameters, weights, iter = 100, cluster.number= 4, mutation_position = "middle", trace = TRUE){
if (trace){
myplot <- tracer(parameters, weights, cluster.number, init = TRUE)
}
old_lnL <- NULL
for (i in seq(1,iter,1)){
print (paste(c("------------Step ", i), collapse=""))
rkvectors <- compute_rkvectors(data=data, parameters=parameters, model = model, weights=weights)
parameters <- compute_params(data=data, rkvectors=rkvectors, model = model, mutation_position = mutation_position)
weights <- compute_weights(rkvectors)
print(rkvectors)
print(weights)
if (trace){
myplot <- tracer(parameters, weights, cluster.number, myplot = myplot, init = FALSE)
}
model_lnL <- compute_model_lnL(data=data, model = model,parameters=parameters, weights=weights)
print ("model lnL")
print(model_lnL)
if (!is.null(old_lnL) && model_lnL - old_lnL < 0.0001){
break
}
else {old_lnL <- model_lnL}
}
model_bic <- bic(lnL = model_lnL, model = model, cluster.number = cluster.number, n = length(data))
print ("data length")
print (length(data))
print ("model bic")
print(model_bic)
list(parameters=parameters, rkvectors=rkvectors, weights=weights, lnL = model_lnL, bic = model_bic)
}
list.of.packages <- c("parallel", "ArgumentCheck", "optparse")
new.packages <- setdiff(list.of.packages, installed.packages()[,"Package"])
count_cores <- detectCores() - 1
list.of.packages <- c("parallel", "ArgumentCheck", "optparse")
new.packages <- setdiff(list.of.packages, installed.packages()[,"Package"])
if(length(new.packages)) install.packages(new.packages)
library(parallel)
count_cores <- detectCores() - 1
count_cores
list.of.packages <- c("parallel", "ArgumentCheck", "optparse")
new.packages <- setdiff(list.of.packages, installed.packages()[,"Package"])
if(length(new.packages)) install.packages(new.packages)
library(scatterplot3d)
getwd()
install.packages("scatterplot3D")
install.packages("scatterplot3d")
fp <-file.path(c(getwd(), "input", paste(c(prot,"_for_LRT.csv"), collapse="")),fsep = .Platform$file.sep)
fp
?file.path
.Platform$file.sep
c(getwd(), "input", paste(c(prot,"_for_LRT.csv"), collapse=""))
paste(c(prot,"_for_LRT.csv"), collapse="")
vex<-c(getwd(), "input", paste(c(prot,"_for_LRT.csv"), collapse=""))
class(vex)
length(vex)
fp <-file.path(c(getwd(), "input"),fsep = .Platform$file.sep)
fp
fp <-file.path(getwd(), "input",fsep = .Platform$file.sep)
fp
fp <-file.path(getwd(), "input", paste(c(prot,"_for_LRT.csv"), collapse=""),fsep = .Platform$file.sep)
fp
count_cores <- detectCores() - 1
count_cores
cl <- makeCluster(count_cores)
prot_data <-  read.csv(file.path(getwd(), "input", paste(c(prot,"_for_LRT.csv"), collapse=""),fsep = .Platform$file.sep),stringsAsFactors=FALSE)
splitted <- split(prot_data, list(prot_data$site, prot_data$ancestor_node), drop=TRUE)
params <-parameters(splitted, mutation_position = "middle",  filter = TRUE, jack = FALSE, pack = "rootsolve", verbose = FALSE)
if (mis.null(model)){
model <- "weibull"
trials <- 2
init_method <- "random"
categories <- 3
}
if (is.null(model)){
model <- "weibull"
trials <- 2
init_method <- "random"
categories <- 3
}
model
model <- "weibull"
trials <- 2
init_method <- "random"
categories <- 3
clusterExport(cl, "params", "splitted")
envir
environment()
clusterExport(cl, list("params", "splitted"))
em_results_list <- parLapply(cl, seq(1, trials, 1), function(trial){
sink (file.path(getwd(), "output","wood_likelihood", model, paste(c(prot, "_", init_method, "_", trial), collapse=""),fsep = .Platform$file.sep))
em_results <- em_procedure(data=splitted, params=params, model = model, iter = 1000, cluster.number= categories, init_method = "cluster", mutation_position = "middle",  filtering = "single", trace = TRUE)
sink()
em_results
})
stopCluster(cl)
stopCluster(cl)
cl <- makeCluster(count_cores)
clusterExport(cl, list("params", "splitted", "model", "categories", "init_method"))
em_results_list <- parLapply(cl, seq(1, trials, 1), function(trial){
sink (file.path(getwd(), "output","wood_likelihood", model, paste(c(prot, "_", init_method, "_", trial), collapse=""),fsep = .Platform$file.sep))
em_results <- em_procedure(data=splitted, params=params, model = model, iter = 1000, cluster.number= categories, init_method = init_method, mutation_position = "middle",  filtering = "single", trace = TRUE)
sink()
em_results
})
stopCluster(cl)
cl <- makeCluster(count_cores)
clusterExport(cl, list("prot", "params", "splitted", "model", "categories", "init_method"))
em_results_list <- parLapply(cl, seq(1, trials, 1), function(trial){
sink (file.path(getwd(), "output","wood_likelihood", model, paste(c(prot, "_", init_method, "_", trial), collapse=""),fsep = .Platform$file.sep))
em_results <- em_procedure(data=splitted, params=params, model = model, iter = 1000, cluster.number= categories, init_method = init_method, mutation_position = "middle",  filtering = "single", trace = TRUE)
sink()
em_results
})
stopCluster(cl)
sinker <- file.path(getwd(), "output","wood_likelihood", model, paste(c(prot, "_", init_method, "_", trial), collapse=""),fsep = .Platform$file.sep)
trial <-1
sinker <- file.path(getwd(), "output","wood_likelihood", model, paste(c(prot, "_", init_method, "_", trial), collapse=""),fsep = .Platform$file.sep)
sinker
cl <- makeCluster(count_cores)
clusterExport(cl, list("prot", "params", "splitted", "model", "categories", "init_method"))
em_results_list <- parLapply(cl, seq(1, trials, 1), function(trial){
sink (file.path(getwd(), "output","wood_likelihood", model, paste(c(prot, "_", init_method, "_", trial), collapse=""),fsep = .Platform$file.sep))
em_results <- em_procedure(data=splitted, params=params, model = model, iter = 1000, cluster.number= categories, init_method = init_method, mutation_position = "middle",  filtering = "single", trace = TRUE)
sink()
em_results
})
stopCluster(cl)
pathnames <- list.files(pattern="^[A-Z].*[.]R$", path=file.path(getwd(), "R", fsep = .Platform$file.sep), full.names=TRUE);
print ("Sourcing files: ")
print (pathnames)
sapply(pathnames, FUN=source);
cl <- makeCluster(count_cores)
clusterExport(cl, list("prot", "params", "splitted", "model", "categories", "init_method"))
em_results_list <- parLapply(cl, seq(1, trials, 1), function(trial){
sink (file.path(getwd(), "output","wood_likelihood", model, paste(c(prot, "_", init_method, "_", trial), collapse=""),fsep = .Platform$file.sep))
em_results <- em_procedure(data=splitted, params=params, model = model, iter = 1000, cluster.number= categories, init_method = init_method, mutation_position = "middle",  filtering = "single", trace = TRUE)
sink()
em_results
})
stopCluster(cl)
