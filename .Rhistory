chisq_groups_test (prot, categories, "_on_six_categories")
chisq_groups_test <-function(prot, categories, tag){
data("mygroups")
model <- "weibull"
prot_groups <-mygroups[grep(paste(c("^", prot, "_"), collapse = ""), names(mygroups))]
em_output <- parse_em_output(prot, model, categories)
best <- best_output_file(em_output)
path <- file.path(getwd(), "output", "wood_likelihood", model, prot, names(best), fsep = .Platform$file.sep)
print (path)
em_file <-  readLines(path)
zeroline <- tail(grep('^\\s+\\[,1\\]', em_file,  value = FALSE, perl = TRUE), 1)
lowpart <- em_file[seq(zeroline+1,length(em_file),1)]
lastline <- head(grep('^\\[1\\]', lowpart,  value = FALSE, perl = TRUE), 1)
rpart <- lowpart[seq(1, lastline-1, 1)]
count_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(count_cores)
clusterExport(cl, list("prot", "rpart", "prot_groups", "model", "categories", "best"), envir = environment())
clusterCall(cl, function() library(evolike))
prot_groups_names <- names(prot_groups)
em_results_list <- parLapply(cl, prot_groups_names, function(group_name){
print (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
sink (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
group <- prot_groups[group_name][[1]]
rvectors <- lapply(rpart, function(row){
splittedrow <- unlist(strsplit(row, '\\s+'))
my_params <- lapply( tail(splittedrow, length(splittedrow)), function(elm){
elm
})
})
df <- data.frame(matrix(unlist(rvectors), nrow=length(rvectors), byrow=T),stringsAsFactors=FALSE)
rownames(df) <- df[,1]
df <- df[,seq(2, ncol(df), 1)]
group_pattern <- sapply(group, function (e){
paste(c("^", e, "\\."), collapse = "")
})
grepper <- paste(group_pattern,collapse="|")
group_nodes <- grep(grepper, rownames(df))
group_df <- df[group_nodes,]
compl_nodes <- !(seq(1,nrow(df),1) %in% group_nodes)
compl_df <- df[compl_nodes,]
ageing <- sapply(seq(1, categories, 1), function(cat){
if (best[[1]]$params[cat,"p"] > 1){TRUE} else {FALSE}
})
ageing_g <- sum(sapply(group_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_g <- sum(sapply(group_df[,!(ageing)], function(e){sum(as.numeric(e))}))
ageing_c <- sum(sapply(compl_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_c <- sum(sapply(compl_df[,!(ageing)], function(e){sum(as.numeric(e))}))
tbl <- matrix(c(ageing_g, adapt_g, ageing_c, adapt_c), ncol = 2, byrow = TRUE, nrow = 2)
colnames(tbl) <- c("ageing", "adapt")
rownames(tbl) <- c("group", "compl")
print(tbl)
print(chisq.test(tbl))
print(fisher.test(tbl))
sink()
})
stopCluster(cl)
}
prot <- "h3"
categories <- 6
chisq_groups_test (prot, categories, "_on_six_categories")
chisq_groups_test <-function(prot, categories, tag){
data("mygroups")
model <- "weibull"
prot_groups <-mygroups[grep(paste(c("^", prot, "_"), collapse = ""), names(mygroups))]
em_output <- parse_em_output(prot, model, categories)
best <- best_output_file(em_output)
path <- file.path(getwd(), "output", "wood_likelihood", model, prot, names(best), fsep = .Platform$file.sep)
print (path)
em_file <-  readLines(path)
zeroline <- tail(grep('^\\s+\\[,1\\]', em_file,  value = FALSE, perl = TRUE), 1)
lowpart <- em_file[seq(zeroline+1,length(em_file),1)]
lastline <- head(grep('^\\[1\\]', lowpart,  value = FALSE, perl = TRUE), 1)
rpart <- lowpart[seq(1, lastline-1, 1)]
count_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(count_cores)
clusterExport(cl, list("prot", "rpart", "prot_groups", "model", "categories", "best"), envir = environment())
clusterCall(cl, function() library(evolike))
prot_groups_names <- names(prot_groups)
em_results_list <- parLapply(cl, prot_groups_names, function(group_name){
print (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
sink (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
print (prot_groups[group_name])
print (prot_groups[group_name][[1]])
group <- prot_groups[group_name][[1]]
rvectors <- lapply(rpart, function(row){
splittedrow <- unlist(strsplit(row, '\\s+'))
my_params <- lapply( tail(splittedrow, length(splittedrow)), function(elm){
elm
})
})
df <- data.frame(matrix(unlist(rvectors), nrow=length(rvectors), byrow=T),stringsAsFactors=FALSE)
rownames(df) <- df[,1]
df <- df[,seq(2, ncol(df), 1)]
group_pattern <- sapply(group, function (e){
paste(c("^", e, "\\."), collapse = "")
})
grepper <- paste(group_pattern,collapse="|")
group_nodes <- grep(grepper, rownames(df))
group_df <- df[group_nodes,]
compl_nodes <- !(seq(1,nrow(df),1) %in% group_nodes)
compl_df <- df[compl_nodes,]
ageing <- sapply(seq(1, categories, 1), function(cat){
if (best[[1]]$params[cat,"p"] > 1){TRUE} else {FALSE}
})
ageing_g <- sum(sapply(group_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_g <- sum(sapply(group_df[,!(ageing)], function(e){sum(as.numeric(e))}))
ageing_c <- sum(sapply(compl_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_c <- sum(sapply(compl_df[,!(ageing)], function(e){sum(as.numeric(e))}))
tbl <- matrix(c(ageing_g, adapt_g, ageing_c, adapt_c), ncol = 2, byrow = TRUE, nrow = 2)
colnames(tbl) <- c("ageing", "adapt")
rownames(tbl) <- c("group", "compl")
print(tbl)
print(chisq.test(tbl))
print(fisher.test(tbl))
sink()
})
stopCluster(cl)
}
prot <- "h3"
categories <- 6
chisq_groups_test (prot, categories, "_on_six_categories")
sink()
sink()
chisq_groups_test <-function(prot, categories, tag){
data("mygroups")
model <- "weibull"
prot_groups <-mygroups[grep(paste(c("^", prot, "_"), collapse = ""), names(mygroups))]
em_output <- parse_em_output(prot, model, categories)
best <- best_output_file(em_output)
path <- file.path(getwd(), "output", "wood_likelihood", model, prot, names(best), fsep = .Platform$file.sep)
print (path)
em_file <-  readLines(path)
zeroline <- tail(grep('^\\s+\\[,1\\]', em_file,  value = FALSE, perl = TRUE), 1)
lowpart <- em_file[seq(zeroline+1,length(em_file),1)]
lastline <- head(grep('^\\[1\\]', lowpart,  value = FALSE, perl = TRUE), 1)
rpart <- lowpart[seq(1, lastline-1, 1)]
count_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(count_cores)
clusterExport(cl, list("prot", "rpart", "prot_groups", "model", "categories", "best"), envir = environment())
clusterCall(cl, function() library(evolike))
prot_groups_names <- names(prot_groups)
em_results_list <- parLapply(cl, prot_groups_names, function(group_name){
print (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
sink (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
print (prot_groups[group_name])
print (prot_groups[group_name][[1]])
group <- prot_groups[group_name][[1]]
rvectors <- lapply(rpart, function(row){
splittedrow <- unlist(strsplit(row, '\\s+'))
my_params <- lapply( tail(splittedrow, length(splittedrow)), function(elm){
elm
})
})
print (rvectors)
df <- data.frame(matrix(unlist(rvectors), nrow=length(rvectors), byrow=T),stringsAsFactors=FALSE)
rownames(df) <- df[,1]
df <- df[,seq(2, ncol(df), 1)]
group_pattern <- sapply(group, function (e){
paste(c("^", e, "\\."), collapse = "")
})
grepper <- paste(group_pattern,collapse="|")
group_nodes <- grep(grepper, rownames(df))
group_df <- df[group_nodes,]
compl_nodes <- !(seq(1,nrow(df),1) %in% group_nodes)
compl_df <- df[compl_nodes,]
ageing <- sapply(seq(1, categories, 1), function(cat){
if (best[[1]]$params[cat,"p"] > 1){TRUE} else {FALSE}
})
ageing_g <- sum(sapply(group_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_g <- sum(sapply(group_df[,!(ageing)], function(e){sum(as.numeric(e))}))
ageing_c <- sum(sapply(compl_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_c <- sum(sapply(compl_df[,!(ageing)], function(e){sum(as.numeric(e))}))
tbl <- matrix(c(ageing_g, adapt_g, ageing_c, adapt_c), ncol = 2, byrow = TRUE, nrow = 2)
colnames(tbl) <- c("ageing", "adapt")
rownames(tbl) <- c("group", "compl")
print(tbl)
print(chisq.test(tbl))
print(fisher.test(tbl))
sink()
})
stopCluster(cl)
}
prot <- "h3"
categories <- 6
chisq_groups_test (prot, categories, "_on_six_categories")
chisq_groups_test <-function(prot, categories, tag){
data("mygroups")
model <- "weibull"
prot_groups <-mygroups[grep(paste(c("^", prot, "_"), collapse = ""), names(mygroups))]
em_output <- parse_em_output(prot, model, categories)
best <- best_output_file(em_output)
path <- file.path(getwd(), "output", "wood_likelihood", model, prot, names(best), fsep = .Platform$file.sep)
print (path)
em_file <-  readLines(path)
zeroline <- tail(grep('^\\s+\\[,1\\]', em_file,  value = FALSE, perl = TRUE), 1)
lowpart <- em_file[seq(zeroline+1,length(em_file),1)]
lastline <- head(grep('^\\[1\\]', lowpart,  value = FALSE, perl = TRUE), 1)
rpart <- lowpart[seq(1, lastline-1, 1)]
count_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(count_cores)
clusterExport(cl, list("prot", "rpart", "prot_groups", "model", "categories", "best"), envir = environment())
clusterCall(cl, function() library(evolike))
prot_groups_names <- names(prot_groups)
em_results_list <- parLapply(cl, prot_groups_names, function(group_name){
print (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
sink (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
print (prot_groups[group_name])
print (prot_groups[group_name][[1]])
group <- prot_groups[group_name][[1]]
rvectors <- lapply(rpart, function(row){
splittedrow <- unlist(strsplit(row, '\\s+'))
my_params <- lapply( tail(splittedrow, length(splittedrow)), function(elm){
elm
})
})
#print (rvectors)
df <- data.frame(matrix(unlist(rvectors), nrow=length(rvectors), byrow=T),stringsAsFactors=FALSE)
rownames(df) <- df[,1]
df <- df[,seq(2, ncol(df), 1)]
print (df)
group_pattern <- sapply(group, function (e){
paste(c("^", e, "\\."), collapse = "")
})
print (group_pattern)
grepper <- paste(group_pattern,collapse="|")
group_nodes <- grep(grepper, rownames(df))
group_df <- df[group_nodes,]
print ("--3--")
print (group_df)
compl_nodes <- !(seq(1,nrow(df),1) %in% group_nodes)
compl_df <- df[compl_nodes,]
print ("--4--")
print (compl_df)
ageing <- sapply(seq(1, categories, 1), function(cat){
if (best[[1]]$params[cat,"p"] > 1){TRUE} else {FALSE}
})
print ("--5--")
print (ageing)
ageing_g <- sum(sapply(group_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_g <- sum(sapply(group_df[,!(ageing)], function(e){sum(as.numeric(e))}))
ageing_c <- sum(sapply(compl_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_c <- sum(sapply(compl_df[,!(ageing)], function(e){sum(as.numeric(e))}))
tbl <- matrix(c(ageing_g, adapt_g, ageing_c, adapt_c), ncol = 2, byrow = TRUE, nrow = 2)
colnames(tbl) <- c("ageing", "adapt")
rownames(tbl) <- c("group", "compl")
print(tbl)
print(chisq.test(tbl))
print(fisher.test(tbl))
sink()
})
stopCluster(cl)
}
prot <- "h3"
categories <- 6
chisq_groups_test (prot, categories, "_on_six_categories")
chisq_groups_test <-function(prot, categories, tag){
data("mygroups")
model <- "weibull"
prot_groups <-mygroups[grep(paste(c("^", prot, "_"), collapse = ""), names(mygroups))]
em_output <- parse_em_output(prot, model, categories)
best <- best_output_file(em_output)
path <- file.path(getwd(), "output", "wood_likelihood", model, prot, names(best), fsep = .Platform$file.sep)
print (path)
em_file <-  readLines(path)
zeroline <- tail(grep('^\\s+\\[,1\\]', em_file,  value = FALSE, perl = TRUE), 1)
lowpart <- em_file[seq(zeroline+1,length(em_file),1)]
lastline <- head(grep('^\\[1\\]', lowpart,  value = FALSE, perl = TRUE), 1)
rpart <- lowpart[seq(1, lastline-1, 1)]
count_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(count_cores)
clusterExport(cl, list("prot", "rpart", "prot_groups", "model", "categories", "best"), envir = environment())
clusterCall(cl, function() library(evolike))
prot_groups_names <- names(prot_groups)
em_results_list <- parLapply(cl, prot_groups_names, function(group_name){
print (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
sink (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
print (prot_groups[group_name])
print (prot_groups[group_name][[1]])
group <- prot_groups[group_name][[1]]
rvectors <- lapply(rpart, function(row){
splittedrow <- unlist(strsplit(row, '\\s+'))
my_params <- lapply( tail(splittedrow, length(splittedrow)), function(elm){
elm
})
})
#print (rvectors)
df <- data.frame(matrix(unlist(rvectors), nrow=length(rvectors), byrow=T),stringsAsFactors=FALSE)
rownames(df) <- df[,1]
df <- df[,seq(2, ncol(df), 1)]
print (df)
group_pattern <- sapply(group, function (e){
paste(c("^", e, "\\."), collapse = "")
})
print (group_pattern)
grepper <- paste(group_pattern,collapse="|")
group_nodes <- grep(grepper, rownames(df))
group_df <- df[group_nodes,]
print ("--3--")
print (group_df)
compl_nodes <- !(seq(1,nrow(df),1) %in% group_nodes)
compl_df <- df[compl_nodes,]
print ("--4--")
print (compl_df)
ageing <- sapply(seq(1, categories, 1), function(cat){
if (best[[1]]$params[cat,"p"] > 1){TRUE} else {FALSE}
})
print ("--5--")
print (ageing)
ageing_g <- sum(sapply(group_df[,(ageing)], function(e){sum(as.numeric(e))}))
print ("--6--")
print (ageing_g)
adapt_g <- sum(sapply(group_df[,!(ageing)], function(e){sum(as.numeric(e))}))
print ("--7--")
print (adapt_g)
ageing_c <- sum(sapply(compl_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_c <- sum(sapply(compl_df[,!(ageing)], function(e){sum(as.numeric(e))}))
tbl <- matrix(c(ageing_g, adapt_g, ageing_c, adapt_c), ncol = 2, byrow = TRUE, nrow = 2)
print ("--8--")
print (tbl)
colnames(tbl) <- c("ageing", "adapt")
rownames(tbl) <- c("group", "compl")
print(tbl)
print(chisq.test(tbl))
print(fisher.test(tbl))
sink()
})
stopCluster(cl)
}
prot <- "h3"
categories <- 6
chisq_groups_test (prot, categories, "_on_six_categories")
chisq_groups_test <-function(prot, categories, tag){
data("mygroups")
model <- "weibull"
prot_groups <-mygroups[grep(paste(c("^", prot, "_"), collapse = ""), names(mygroups))]
em_output <- parse_em_output(prot, model, categories)
best <- best_output_file(em_output)
path <- file.path(getwd(), "output", "wood_likelihood", model, prot, names(best), fsep = .Platform$file.sep)
print (path)
em_file <-  readLines(path)
zeroline <- tail(grep('^\\s+\\[,1\\]', em_file,  value = FALSE, perl = TRUE), 1)
lowpart <- em_file[seq(zeroline+1,length(em_file),1)]
lastline <- head(grep('^\\[1\\]', lowpart,  value = FALSE, perl = TRUE), 1)
rpart <- lowpart[seq(1, lastline-1, 1)]
count_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(count_cores)
clusterExport(cl, list("prot", "rpart", "prot_groups", "model", "categories", "best"), envir = environment())
clusterCall(cl, function() library(evolike))
prot_groups_names <- names(prot_groups)
em_results_list <- parLapply(cl, prot_groups_names, function(group_name){
print (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
sink (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
print (prot_groups[group_name])
print (prot_groups[group_name][[1]])
group <- prot_groups[group_name][[1]]
rvectors <- lapply(rpart, function(row){
splittedrow <- unlist(strsplit(row, '\\s+'))
my_params <- lapply( tail(splittedrow, length(splittedrow)), function(elm){
elm
})
})
#print (rvectors)
df <- data.frame(matrix(unlist(rvectors), nrow=length(rvectors), byrow=T),stringsAsFactors=FALSE)
rownames(df) <- df[,1]
df <- df[,seq(2, ncol(df), 1)]
print (df)
group_pattern <- sapply(group, function (e){
paste(c("^", e, "\\."), collapse = "")
})
print (group_pattern)
grepper <- paste(group_pattern,collapse="|")
group_nodes <- grep(grepper, rownames(df))
group_df <- df[group_nodes,]
print ("--3--")
print (group_df)
compl_nodes <- !(seq(1,nrow(df),1) %in% group_nodes)
compl_df <- df[compl_nodes,]
print ("--4--")
print (compl_df)
ageing <- sapply(seq(1, categories, 1), function(cat){
if (best[[1]]$params[cat,"p"] > 1){TRUE} else {FALSE}
})
print ("--5--")
print (ageing)
print ("--5b--")
print (group_df[,(ageing)])
ageing_g <- sum(sapply(group_df[,(ageing)], function(e){sum(as.numeric(e))}))
print ("--6--")
print (ageing_g)
adapt_g <- sum(sapply(group_df[,!(ageing)], function(e){sum(as.numeric(e))}))
print ("--7--")
print (adapt_g)
ageing_c <- sum(sapply(compl_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_c <- sum(sapply(compl_df[,!(ageing)], function(e){sum(as.numeric(e))}))
tbl <- matrix(c(ageing_g, adapt_g, ageing_c, adapt_c), ncol = 2, byrow = TRUE, nrow = 2)
print ("--8--")
print (tbl)
colnames(tbl) <- c("ageing", "adapt")
rownames(tbl) <- c("group", "compl")
print(tbl)
print(chisq.test(tbl))
print(fisher.test(tbl))
sink()
})
stopCluster(cl)
}
prot <- "h3"
categories <- 6
chisq_groups_test (prot, categories, "_on_six_categories")
chisq_groups_test <-function(prot, categories, tag){
data("mygroups")
model <- "weibull"
prot_groups <-mygroups[grep(paste(c("^", prot, "_"), collapse = ""), names(mygroups))]
em_output <- parse_em_output(prot, model, categories)
best <- best_output_file(em_output)
path <- file.path(getwd(), "output", "wood_likelihood", model, prot, names(best), fsep = .Platform$file.sep)
print (path)
em_file <-  readLines(path)
zeroline <- tail(grep('^\\s+\\[,1\\]', em_file,  value = FALSE, perl = TRUE), 1)
lowpart <- em_file[seq(zeroline+1,length(em_file),1)]
lastline <- head(grep('^\\[1\\]', lowpart,  value = FALSE, perl = TRUE), 1)
rpart <- lowpart[seq(1, lastline-1, 1)]
count_cores <- detectCores() - 1
# Initiate cluster
cl <- makeCluster(count_cores)
clusterExport(cl, list("prot", "rpart", "prot_groups", "model", "categories", "best"), envir = environment())
clusterCall(cl, function() library(evolike))
prot_groups_names <- names(prot_groups)
em_results_list <- parLapply(cl, prot_groups_names, function(group_name){
print (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
sink (file.path(getwd(), "output", "chisq", model, prot, paste (c(group_name,"_", tag), collapse= ""), fsep = .Platform$file.sep))
group <- prot_groups[group_name][[1]]
rvectors <- lapply(rpart, function(row){
splittedrow <- unlist(strsplit(row, '\\s+'))
my_params <- lapply( tail(splittedrow, length(splittedrow)), function(elm){
elm
})
})
df <- data.frame(matrix(unlist(rvectors), nrow=length(rvectors), byrow=T),stringsAsFactors=FALSE)
rownames(df) <- df[,1]
df <- df[,seq(2, ncol(df), 1)]
group_pattern <- sapply(group, function (e){
paste(c("^", e, "\\."), collapse = "")
})
grepper <- paste(group_pattern,collapse="|")
group_nodes <- grep(grepper, rownames(df))
group_df <- df[group_nodes,]
compl_nodes <- !(seq(1,nrow(df),1) %in% group_nodes)
compl_df <- df[compl_nodes,]
ageing <- sapply(seq(1, categories, 1), function(cat){
if (best[[1]]$params[cat,"p"] > 1){TRUE} else {FALSE}
})
ageing_g <- sum(sapply(group_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_g <- sum(sapply(group_df[,!(ageing)], function(e){sum(as.numeric(e))}))
ageing_c <- sum(sapply(compl_df[,(ageing)], function(e){sum(as.numeric(e))}))
adapt_c <- sum(sapply(compl_df[,!(ageing)], function(e){sum(as.numeric(e))}))
tbl <- matrix(c(ageing_g, adapt_g, ageing_c, adapt_c), ncol = 2, byrow = TRUE, nrow = 2)
colnames(tbl) <- c("ageing", "adapt")
rownames(tbl) <- c("group", "compl")
print(tbl)
print(chisq.test(tbl))
print(fisher.test(tbl))
sink()
})
stopCluster(cl)
}
prot <- "h3"
categories <- 6
chisq_groups_test (prot, categories, "_on_six_categories")
prot <- "h3"
categories <- 6
chisq_groups_test (prot, categories, "_on_six_categories")
sink()
prot <- "h3"
categories <- 5
model <- "weibull" # weibull or exponential
em_output <- parse_em_output(prot, model, categories, toys = TRUE)
## prints parameters and bic for every em launch
em_output
length(em_output)
## 3d picture of model parameters, produced by all launches of em procedure
## prints bics for each launch
## tells which one is the best
show_em_all_results(em_output, model)
prot <- "h3"
categories <- 5
model <- "weibull" # weibull or exponential
em_output <- parse_em_output(prot, model, categories, toys = TRUE)
## prints parameters and bic for every em launch
em_output
length(em_output)
## 3d picture of model parameters, produced by all launches of em procedure
## prints bics for each launch
## tells which one is the best
show_em_all_results(em_output, model)
prot <- "h3"
categories <- 7
model <- "weibull" # weibull or exponential
em_output <- parse_em_output(prot, model, categories, toys = TRUE)
## prints parameters and bic for every em launch
em_output
length(em_output)
## 3d picture of model parameters, produced by all launches of em procedure
## prints bics for each launch
## tells which one is the best
show_em_all_results(em_output, model)
